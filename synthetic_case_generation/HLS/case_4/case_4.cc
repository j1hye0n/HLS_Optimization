

#include <stdio.h>
#include "ap_fixed.h"

void case_4(
    ap_int<16> in_data[25],
    ap_int<16> out_data[19]
)
{

#pragma HLS array_partition variable=in_data complete
#pragma HLS array_partition variable=out_data complete

    

ap_int<2> in1;
in1.range(1, 0) = in_data[0].range(1, 0);
ap_int<9> in2;
in2.range(8, 0) = in_data[1].range(8, 0);
ap_int<3> in3;
in3.range(2, 0) = in_data[2].range(2, 0);
ap_int<3> in4;
in4.range(2, 0) = in_data[3].range(2, 0);
ap_int<14> in5;
in5.range(13, 0) = in_data[4].range(13, 0);
ap_int<13> in6;
in6.range(12, 0) = in_data[5].range(12, 0);
ap_int<3> in7;
in7.range(2, 0) = in_data[6].range(2, 0);
ap_int<11> in8;
in8.range(10, 0) = in_data[7].range(10, 0);
ap_int<12> in9;
in9.range(11, 0) = in_data[8].range(11, 0);
ap_int<7> in10;
in10.range(6, 0) = in_data[9].range(6, 0);
ap_int<10> in11;
in11.range(9, 0) = in_data[10].range(9, 0);
ap_int<9> in12;
in12.range(8, 0) = in_data[11].range(8, 0);
ap_int<8> in13;
in13.range(7, 0) = in_data[12].range(7, 0);
ap_int<16> in14;
in14.range(15, 0) = in_data[13].range(15, 0);
ap_int<2> in15;
in15.range(1, 0) = in_data[14].range(1, 0);
ap_int<7> in16;
in16.range(6, 0) = in_data[15].range(6, 0);
ap_int<14> in17;
in17.range(13, 0) = in_data[16].range(13, 0);
ap_int<16> in18;
in18.range(15, 0) = in_data[17].range(15, 0);
ap_int<3> in19;
in19.range(2, 0) = in_data[18].range(2, 0);
ap_int<7> in20;
in20.range(6, 0) = in_data[19].range(6, 0);
ap_int<3> in21;
in21.range(2, 0) = in_data[20].range(2, 0);
ap_int<12> in22;
in22.range(11, 0) = in_data[21].range(11, 0);
ap_int<16> in23;
in23.range(15, 0) = in_data[22].range(15, 0);
ap_int<5> in24;
in24.range(4, 0) = in_data[23].range(4, 0);
ap_int<13> in25;
in25.range(12, 0) = in_data[24].range(12, 0);

ap_int<6> m26;
ap_int<2> m27;
ap_int<14> m28;
ap_int<7> m29;
ap_int<9> m30;
ap_int<15> m31;
ap_int<10> m32;
ap_int<12> m33;
ap_int<10> m34;
ap_int<9> m35;
ap_int<4> m36;
ap_int<3> m37;
ap_int<4> m38;
ap_int<6> m39;
ap_int<14> m40;
ap_int<7> m41;
ap_int<2> m42;
ap_int<15> m43;
ap_int<3> m44;
ap_int<7> m45;
ap_int<10> m46;
ap_int<6> m47;
ap_int<13> m48;
ap_int<6> m49;
ap_int<15> m50;
ap_int<10> m51;
ap_int<5> m52;
ap_int<14> m53;
ap_int<8> m54;
ap_int<5> m55;
ap_int<7> m56;
ap_int<6> m57;
ap_int<7> m58;
ap_int<14> m59;
ap_int<14> m60;
ap_int<10> m61;
ap_int<5> m62;
ap_int<13> m63;
ap_int<13> m64;
ap_int<7> m65;
ap_int<9> m66;
ap_int<4> m67;
ap_int<12> m68;
ap_int<10> m69;
ap_int<5> m70;
ap_int<2> m71;
ap_int<15> m72;
ap_int<4> m73;
ap_int<6> m74;
ap_int<12> m75;
ap_int<6> m76;
ap_int<12> m77;
ap_int<11> m78;
ap_int<9> m79;
ap_int<9> m80;
ap_int<12> m81;
ap_int<7> m82;
ap_int<5> m83;
ap_int<9> m84;
ap_int<13> m85;
ap_int<5> m86;
ap_int<5> m87;
ap_int<9> m88;
ap_int<12> m89;
ap_int<4> m90;
ap_int<16> m91;
ap_int<6> m92;
ap_int<12> m93;
ap_int<2> m94;
ap_int<2> m95;
ap_int<5> m96;
ap_int<8> m97;
ap_int<7> m98;
ap_int<5> m99;
ap_int<10> m100;
ap_int<9> m101;
ap_int<11> m102;
ap_int<10> m103;
ap_int<3> m104;
ap_int<16> m105;

m26 = in12 * in6;
m27 = in24 * m26;
m28 = in14 + in9;
m29 = in5 + in12;
m30 = in6 + in10;
m31 = in10 * in25;
m32 = in25 * in20;
m33 = in18 * in22;
m34 = m33 + in16;
m35 = in20 * in25;
m36 = m30 * in21;
m37 = in12 + in21;
m38 = in14 + m27;
m39 = m32 * in25;
m40 = in23 * m33;
m41 = m37 + m34;
m42 = m27 * m27;
m43 = m34 * m29;
m44 = m42 * m29;
m45 = m43 * in22;
m46 = m28 * m43;
m47 = m32 * m45;
m48 = m43 * m44;
m49 = m37 * m43;
m50 = m43 * m32;
m51 = m49 * m32;
m52 = m44 * m30;
m53 = m43 * m42;
m54 = m39 * m34;
m55 = m44 * m47;
m56 = m50 * m43;
m57 = m33 * m34;
m58 = m44 * m45;
m59 = m35 * m43;
m60 = m58 * m35;
m61 = m53 * m55;
m62 = m38 * m38;
m63 = m59 + m61;
m64 = m40 + m59;
m65 = m53 + m63;
m66 = m46 * m56;
m67 = m63 * m44;
m68 = m48 * m53;
m69 = m54 * m50;
m70 = m53 * m55;
m71 = m47 * m70;
m72 = m56 * m54;
m73 = m55 + m71;
m74 = m70 * m72;
m75 = m73 * m50;
m76 = m63 * m74;
m77 = m53 * m59;
m78 = m70 * m74;
m79 = m57 * m72;
m80 = m73 * m57;
m81 = m67 * m68;
m82 = m74 * m61;
m83 = m62 + m64;
m84 = m77 * m70;
m85 = m78 + m69;
m86 = m79 * m69;
m87 = m63 + m71;
m88 = m65 * m66;
m89 = m66 * m72;
m90 = m86 * m88;
m91 = m83 * m89;
m92 = m68 * m88;
m93 = m90 * m88;
m94 = m87 * m70;
m95 = m71 * m94;
m96 = m88 * m73;
m97 = m84 * m78;
m98 = m95 + m89;
m99 = m83 * m98;
m100 = m79 * m78;
m101 = m79 * m82;
m102 = m83 * m80;
m103 = m80 * m89;
m104 = m90 + m96;
m105 = m100 * m91;

out_data[0] = m31;
out_data[1] = m36;
out_data[2] = m41;
out_data[3] = m51;
out_data[4] = m52;
out_data[5] = m60;
out_data[6] = m75;
out_data[7] = m76;
out_data[8] = m81;
out_data[9] = m85;
out_data[10] = m92;
out_data[11] = m93;
out_data[12] = m97;
out_data[13] = m99;
out_data[14] = m101;
out_data[15] = m102;
out_data[16] = m103;
out_data[17] = m104;
out_data[18] = m105;


}
    