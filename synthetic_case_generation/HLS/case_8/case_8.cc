

#include <stdio.h>
#include "ap_fixed.h"

void case_8(
    ap_int<16> in_data[25],
    ap_int<16> out_data[14]
)
{

#pragma HLS array_partition variable=in_data complete
#pragma HLS array_partition variable=out_data complete

    

ap_int<7> in1;
in1.range(6, 0) = in_data[0].range(6, 0);
ap_int<16> in2;
in2.range(15, 0) = in_data[1].range(15, 0);
ap_int<7> in3;
in3.range(6, 0) = in_data[2].range(6, 0);
ap_int<2> in4;
in4.range(1, 0) = in_data[3].range(1, 0);
ap_int<11> in5;
in5.range(10, 0) = in_data[4].range(10, 0);
ap_int<9> in6;
in6.range(8, 0) = in_data[5].range(8, 0);
ap_int<16> in7;
in7.range(15, 0) = in_data[6].range(15, 0);
ap_int<7> in8;
in8.range(6, 0) = in_data[7].range(6, 0);
ap_int<6> in9;
in9.range(5, 0) = in_data[8].range(5, 0);
ap_int<16> in10;
in10.range(15, 0) = in_data[9].range(15, 0);
ap_int<13> in11;
in11.range(12, 0) = in_data[10].range(12, 0);
ap_int<6> in12;
in12.range(5, 0) = in_data[11].range(5, 0);
ap_int<8> in13;
in13.range(7, 0) = in_data[12].range(7, 0);
ap_int<6> in14;
in14.range(5, 0) = in_data[13].range(5, 0);
ap_int<12> in15;
in15.range(11, 0) = in_data[14].range(11, 0);
ap_int<12> in16;
in16.range(11, 0) = in_data[15].range(11, 0);
ap_int<14> in17;
in17.range(13, 0) = in_data[16].range(13, 0);
ap_int<9> in18;
in18.range(8, 0) = in_data[17].range(8, 0);
ap_int<3> in19;
in19.range(2, 0) = in_data[18].range(2, 0);
ap_int<4> in20;
in20.range(3, 0) = in_data[19].range(3, 0);
ap_int<6> in21;
in21.range(5, 0) = in_data[20].range(5, 0);
ap_int<11> in22;
in22.range(10, 0) = in_data[21].range(10, 0);
ap_int<16> in23;
in23.range(15, 0) = in_data[22].range(15, 0);
ap_int<10> in24;
in24.range(9, 0) = in_data[23].range(9, 0);
ap_int<10> in25;
in25.range(9, 0) = in_data[24].range(9, 0);

ap_int<8> m26;
ap_int<9> m27;
ap_int<9> m28;
ap_int<13> m29;
ap_int<13> m30;
ap_int<12> m31;
ap_int<9> m32;
ap_int<9> m33;
ap_int<16> m34;
ap_int<4> m35;
ap_int<8> m36;
ap_int<15> m37;
ap_int<10> m38;
ap_int<13> m39;
ap_int<7> m40;
ap_int<8> m41;
ap_int<15> m42;
ap_int<5> m43;
ap_int<11> m44;
ap_int<6> m45;
ap_int<12> m46;
ap_int<8> m47;
ap_int<16> m48;
ap_int<14> m49;
ap_int<16> m50;
ap_int<6> m51;
ap_int<9> m52;
ap_int<10> m53;
ap_int<7> m54;
ap_int<9> m55;
ap_int<13> m56;
ap_int<4> m57;
ap_int<7> m58;
ap_int<12> m59;
ap_int<15> m60;
ap_int<7> m61;
ap_int<4> m62;
ap_int<12> m63;
ap_int<15> m64;
ap_int<16> m65;
ap_int<15> m66;
ap_int<16> m67;
ap_int<15> m68;
ap_int<16> m69;
ap_int<9> m70;
ap_int<15> m71;
ap_int<8> m72;
ap_int<15> m73;
ap_int<7> m74;
ap_int<14> m75;
ap_int<12> m76;
ap_int<10> m77;
ap_int<6> m78;
ap_int<11> m79;
ap_int<2> m80;
ap_int<12> m81;
ap_int<16> m82;
ap_int<15> m83;
ap_int<14> m84;
ap_int<12> m85;
ap_int<16> m86;
ap_int<7> m87;
ap_int<11> m88;
ap_int<7> m89;
ap_int<8> m90;
ap_int<6> m91;
ap_int<13> m92;
ap_int<6> m93;
ap_int<6> m94;
ap_int<11> m95;
ap_int<11> m96;
ap_int<11> m97;
ap_int<8> m98;
ap_int<9> m99;
ap_int<16> m100;
ap_int<7> m101;
ap_int<11> m102;
ap_int<4> m103;
ap_int<8> m104;

m26 = in2 * in24;
m27 = in25 * in22;
m28 = m27 * in13;
m29 = in19 * in7;
m30 = in16 * in7;
m31 = in18 * in15;
m32 = in18 * m29;
m33 = m26 + m29;
m34 = in19 * in10;
m35 = m30 + in20;
m36 = m29 * m28;
m37 = m36 * m31;
m38 = m28 * m30;
m39 = m36 + in16;
m40 = m37 * in17;
m41 = in23 * m27;
m42 = in20 * in17;
m43 = m29 * m40;
m44 = m41 * m40;
m45 = in21 * m42;
m46 = m27 * m26;
m47 = m27 * m40;
m48 = m30 + in23;
m49 = m47 + m44;
m50 = m27 * m33;
m51 = m39 * m49;
m52 = m39 + m48;
m53 = m47 * m28;
m54 = m45 + m38;
m55 = m44 * m35;
m56 = m55 * m44;
m57 = m36 * m43;
m58 = m42 * m53;
m59 = m46 + m44;
m60 = m44 * m38;
m61 = m47 + m43;
m62 = m46 * m51;
m63 = m39 * m62;
m64 = m46 * m39;
m65 = m59 * m56;
m66 = m65 * m49;
m67 = m46 + m51;
m68 = m59 * m49;
m69 = m52 * m44;
m70 = m52 * m67;
m71 = m64 * m68;
m72 = m63 + m61;
m73 = m62 * m49;
m74 = m54 * m59;
m75 = m62 * m73;
m76 = m53 * m55;
m77 = m75 * m65;
m78 = m75 + m58;
m79 = m70 * m59;
m80 = m57 * m62;
m81 = m68 * m59;
m82 = m80 * m67;
m83 = m68 + m63;
m84 = m70 * m77;
m85 = m69 * m71;
m86 = m74 * m64;
m87 = m64 * m84;
m88 = m67 * m86;
m89 = m84 * m88;
m90 = m86 + m77;
m91 = m78 * m84;
m92 = m79 * m85;
m93 = m87 * m92;
m94 = m83 * m85;
m95 = m77 * m81;
m96 = m75 * m75;
m97 = m77 * m72;
m98 = m83 * m90;
m99 = m95 * m82;
m100 = m99 * m76;
m101 = m88 + m98;
m102 = m82 * m93;
m103 = m98 * m102;
m104 = m80 * m87;

out_data[0] = m32;
out_data[1] = m34;
out_data[2] = m50;
out_data[3] = m60;
out_data[4] = m66;
out_data[5] = m89;
out_data[6] = m91;
out_data[7] = m94;
out_data[8] = m96;
out_data[9] = m97;
out_data[10] = m100;
out_data[11] = m101;
out_data[12] = m103;
out_data[13] = m104;


}
    