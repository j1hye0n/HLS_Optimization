// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="case_3_case_3,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.620000,HLS_SYN_LAT=6,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=95,HLS_SYN_LUT=500,HLS_VERSION=2024_2}" *)

module case_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_data_0,
        in_data_1,
        in_data_2,
        in_data_3,
        in_data_4,
        out_data_0,
        out_data_0_ap_vld,
        out_data_1,
        out_data_1_ap_vld,
        out_data_2,
        out_data_2_ap_vld,
        out_data_3,
        out_data_3_ap_vld,
        out_data_4,
        out_data_4_ap_vld,
        out_data_5,
        out_data_5_ap_vld,
        out_data_6,
        out_data_6_ap_vld,
        out_data_7,
        out_data_7_ap_vld,
        out_data_8,
        out_data_8_ap_vld,
        out_data_9,
        out_data_9_ap_vld,
        out_data_10,
        out_data_10_ap_vld,
        out_data_11,
        out_data_11_ap_vld,
        out_data_12,
        out_data_12_ap_vld,
        out_data_13,
        out_data_13_ap_vld,
        out_data_14,
        out_data_14_ap_vld,
        out_data_15,
        out_data_15_ap_vld,
        out_data_16,
        out_data_16_ap_vld,
        out_data_17,
        out_data_17_ap_vld
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] in_data_0;
input  [15:0] in_data_1;
input  [15:0] in_data_2;
input  [15:0] in_data_3;
input  [15:0] in_data_4;
output  [15:0] out_data_0;
output   out_data_0_ap_vld;
output  [15:0] out_data_1;
output   out_data_1_ap_vld;
output  [15:0] out_data_2;
output   out_data_2_ap_vld;
output  [15:0] out_data_3;
output   out_data_3_ap_vld;
output  [15:0] out_data_4;
output   out_data_4_ap_vld;
output  [15:0] out_data_5;
output   out_data_5_ap_vld;
output  [15:0] out_data_6;
output   out_data_6_ap_vld;
output  [15:0] out_data_7;
output   out_data_7_ap_vld;
output  [15:0] out_data_8;
output   out_data_8_ap_vld;
output  [15:0] out_data_9;
output   out_data_9_ap_vld;
output  [15:0] out_data_10;
output   out_data_10_ap_vld;
output  [15:0] out_data_11;
output   out_data_11_ap_vld;
output  [15:0] out_data_12;
output   out_data_12_ap_vld;
output  [15:0] out_data_13;
output   out_data_13_ap_vld;
output  [15:0] out_data_14;
output   out_data_14_ap_vld;
output  [15:0] out_data_15;
output   out_data_15_ap_vld;
output  [15:0] out_data_16;
output   out_data_16_ap_vld;
output  [15:0] out_data_17;
output   out_data_17_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_data_0_ap_vld;
reg out_data_1_ap_vld;
reg out_data_2_ap_vld;
reg out_data_3_ap_vld;
reg out_data_4_ap_vld;
reg out_data_5_ap_vld;
reg out_data_6_ap_vld;
reg out_data_7_ap_vld;
reg out_data_8_ap_vld;
reg out_data_9_ap_vld;
reg out_data_10_ap_vld;
reg out_data_11_ap_vld;
reg out_data_12_ap_vld;
reg out_data_13_ap_vld;
reg out_data_14_ap_vld;
reg out_data_15_ap_vld;
reg out_data_16_ap_vld;
reg out_data_17_ap_vld;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [5:0] in5_fu_221_p1;
reg  signed [5:0] in5_reg_357;
wire   [8:0] m6_fu_229_p2;
reg  signed [8:0] m6_reg_362;
wire  signed [9:0] trunc_ln221_fu_243_p1;
reg  signed [9:0] trunc_ln221_reg_377;
wire  signed [9:0] mul_ln227_fu_250_p2;
reg  signed [9:0] mul_ln227_reg_382;
wire    ap_CS_fsm_state2;
wire  signed [9:0] mul_ln227_1_fu_258_p2;
reg  signed [9:0] mul_ln227_1_reg_387;
wire    ap_CS_fsm_state3;
wire  signed [8:0] trunc_ln225_fu_271_p1;
reg  signed [8:0] trunc_ln225_reg_398;
wire  signed [5:0] m13_fu_286_p2;
reg  signed [5:0] m13_reg_403;
wire    ap_CS_fsm_state4;
wire  signed [9:0] m14_fu_292_p2;
reg  signed [9:0] m14_reg_409;
wire  signed [5:0] trunc_ln228_fu_296_p1;
reg  signed [5:0] trunc_ln228_reg_414;
wire  signed [5:0] m15_fu_305_p2;
reg  signed [5:0] m15_reg_420;
wire    ap_CS_fsm_state5;
wire   [5:0] m16_fu_309_p2;
reg  signed [5:0] m16_reg_426;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire  signed [8:0] trunc_ln219_fu_225_p1;
wire  signed [4:0] m10_fu_263_p1;
wire  signed [6:0] grp_fu_347_p3;
wire  signed [5:0] trunc_ln226_fu_283_p1;
wire   [8:0] m12_fu_278_p2;
wire   [6:0] m17_fu_319_p2;
wire   [10:0] m19_fu_336_p2;
wire  signed [6:0] grp_fu_347_p0;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

case_3_mul_9s_9s_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
mul_9s_9s_9_1_1_U1(
    .din0(trunc_ln219_fu_225_p1),
    .din1(trunc_ln219_fu_225_p1),
    .dout(m6_fu_229_p2)
);

case_3_mul_10s_9s_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 10 ))
mul_10s_9s_10_1_1_U2(
    .din0(trunc_ln221_reg_377),
    .din1(m6_reg_362),
    .dout(mul_ln227_fu_250_p2)
);

case_3_mul_10s_6s_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 10 ))
mul_10s_6s_10_1_1_U3(
    .din0(mul_ln227_reg_382),
    .din1(in5_reg_357),
    .dout(mul_ln227_1_fu_258_p2)
);

case_3_mul_9s_7s_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 9 ))
mul_9s_7s_9_1_1_U4(
    .din0(trunc_ln225_reg_398),
    .din1(grp_fu_347_p3),
    .dout(m12_fu_278_p2)
);

case_3_mul_6s_6s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 6 ))
mul_6s_6s_6_1_1_U5(
    .din0(trunc_ln226_fu_283_p1),
    .din1(trunc_ln226_fu_283_p1),
    .dout(m13_fu_286_p2)
);

case_3_mul_10s_10s_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
mul_10s_10s_10_1_1_U6(
    .din0(mul_ln227_1_reg_387),
    .din1(mul_ln227_1_reg_387),
    .dout(m14_fu_292_p2)
);

case_3_mul_6s_6s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 6 ))
mul_6s_6s_6_1_1_U7(
    .din0(m13_reg_403),
    .din1(trunc_ln228_reg_414),
    .dout(m15_fu_305_p2)
);

case_3_mul_6s_6s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 6 ))
mul_6s_6s_6_1_1_U8(
    .din0(m15_reg_420),
    .din1(trunc_ln228_reg_414),
    .dout(m16_fu_309_p2)
);

case_3_mul_6s_6s_7_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 7 ))
mul_6s_6s_7_1_1_U9(
    .din0(m15_reg_420),
    .din1(m13_reg_403),
    .dout(m17_fu_319_p2)
);

case_3_mul_10s_6s_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 11 ))
mul_10s_6s_11_1_1_U10(
    .din0(m14_reg_409),
    .din1(m16_reg_426),
    .dout(m19_fu_336_p2)
);

case_3_mac_muladd_7s_6s_5s_7_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 7 ))
mac_muladd_7s_6s_5s_7_4_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_347_p0),
    .din1(in5_fu_221_p1),
    .din2(m10_fu_263_p1),
    .ce(1'b1),
    .dout(grp_fu_347_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        in5_reg_357 <= in5_fu_221_p1;
        m6_reg_362 <= m6_fu_229_p2;
        trunc_ln221_reg_377 <= trunc_ln221_fu_243_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        m13_reg_403 <= m13_fu_286_p2;
        m14_reg_409 <= m14_fu_292_p2;
        trunc_ln228_reg_414 <= trunc_ln228_fu_296_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m15_reg_420 <= m15_fu_305_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        m16_reg_426 <= m16_fu_309_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mul_ln227_1_reg_387 <= mul_ln227_1_fu_258_p2;
        trunc_ln225_reg_398 <= trunc_ln225_fu_271_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mul_ln227_reg_382 <= mul_ln227_fu_250_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_data_0_ap_vld = 1'b1;
    end else begin
        out_data_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_data_10_ap_vld = 1'b1;
    end else begin
        out_data_10_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_data_11_ap_vld = 1'b1;
    end else begin
        out_data_11_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_data_12_ap_vld = 1'b1;
    end else begin
        out_data_12_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_data_13_ap_vld = 1'b1;
    end else begin
        out_data_13_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_data_14_ap_vld = 1'b1;
    end else begin
        out_data_14_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_data_15_ap_vld = 1'b1;
    end else begin
        out_data_15_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_data_16_ap_vld = 1'b1;
    end else begin
        out_data_16_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_data_17_ap_vld = 1'b1;
    end else begin
        out_data_17_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_data_1_ap_vld = 1'b1;
    end else begin
        out_data_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_data_2_ap_vld = 1'b1;
    end else begin
        out_data_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_data_3_ap_vld = 1'b1;
    end else begin
        out_data_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_data_4_ap_vld = 1'b1;
    end else begin
        out_data_4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_data_5_ap_vld = 1'b1;
    end else begin
        out_data_5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_data_6_ap_vld = 1'b1;
    end else begin
        out_data_6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_data_7_ap_vld = 1'b1;
    end else begin
        out_data_7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_data_8_ap_vld = 1'b1;
    end else begin
        out_data_8_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_data_9_ap_vld = 1'b1;
    end else begin
        out_data_9_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign grp_fu_347_p0 = in_data_2[6:0];

assign in5_fu_221_p1 = in_data_4[5:0];

assign m10_fu_263_p1 = mul_ln227_1_fu_258_p2[4:0];

assign out_data_0 = $signed(m12_fu_278_p2);

assign out_data_1 = $signed(m17_fu_319_p2);

assign out_data_10 = 16'd0;

assign out_data_11 = 16'd0;

assign out_data_12 = 16'd0;

assign out_data_13 = 16'd0;

assign out_data_14 = 16'd0;

assign out_data_15 = 16'd0;

assign out_data_16 = 16'd0;

assign out_data_17 = 16'd0;

assign out_data_2 = $signed(m19_fu_336_p2);

assign out_data_3 = 16'd0;

assign out_data_4 = 16'd0;

assign out_data_5 = 16'd0;

assign out_data_6 = 16'd0;

assign out_data_7 = 16'd0;

assign out_data_8 = 16'd0;

assign out_data_9 = 16'd0;

assign trunc_ln219_fu_225_p1 = in_data_2[8:0];

assign trunc_ln221_fu_243_p1 = in_data_2[9:0];

assign trunc_ln225_fu_271_p1 = mul_ln227_1_fu_258_p2[8:0];

assign trunc_ln226_fu_283_p1 = grp_fu_347_p3[5:0];

assign trunc_ln228_fu_296_p1 = m14_fu_292_p2[5:0];

endmodule //case_3
