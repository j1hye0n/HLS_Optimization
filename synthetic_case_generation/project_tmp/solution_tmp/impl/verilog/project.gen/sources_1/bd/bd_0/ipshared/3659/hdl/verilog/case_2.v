// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="case_2_case_2,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.080000,HLS_SYN_LAT=9,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=514,HLS_SYN_LUT=1633,HLS_VERSION=2024_2}" *)

module case_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_data_0,
        in_data_1,
        in_data_2,
        in_data_3,
        in_data_4,
        in_data_5,
        in_data_6,
        in_data_7,
        in_data_8,
        in_data_9,
        in_data_10,
        in_data_11,
        in_data_12,
        in_data_13,
        in_data_14,
        in_data_15,
        in_data_16,
        in_data_17,
        in_data_18,
        in_data_19,
        in_data_20,
        out_data_0,
        out_data_0_ap_vld,
        out_data_1,
        out_data_1_ap_vld,
        out_data_2,
        out_data_2_ap_vld,
        out_data_3,
        out_data_3_ap_vld,
        out_data_4,
        out_data_4_ap_vld,
        out_data_5,
        out_data_5_ap_vld,
        out_data_6,
        out_data_6_ap_vld,
        out_data_7,
        out_data_7_ap_vld,
        out_data_8,
        out_data_8_ap_vld,
        out_data_9,
        out_data_9_ap_vld,
        out_data_10,
        out_data_10_ap_vld,
        out_data_11,
        out_data_11_ap_vld,
        out_data_12,
        out_data_12_ap_vld
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] in_data_0;
input  [15:0] in_data_1;
input  [15:0] in_data_2;
input  [15:0] in_data_3;
input  [15:0] in_data_4;
input  [15:0] in_data_5;
input  [15:0] in_data_6;
input  [15:0] in_data_7;
input  [15:0] in_data_8;
input  [15:0] in_data_9;
input  [15:0] in_data_10;
input  [15:0] in_data_11;
input  [15:0] in_data_12;
input  [15:0] in_data_13;
input  [15:0] in_data_14;
input  [15:0] in_data_15;
input  [15:0] in_data_16;
input  [15:0] in_data_17;
input  [15:0] in_data_18;
input  [15:0] in_data_19;
input  [15:0] in_data_20;
output  [15:0] out_data_0;
output   out_data_0_ap_vld;
output  [15:0] out_data_1;
output   out_data_1_ap_vld;
output  [15:0] out_data_2;
output   out_data_2_ap_vld;
output  [15:0] out_data_3;
output   out_data_3_ap_vld;
output  [15:0] out_data_4;
output   out_data_4_ap_vld;
output  [15:0] out_data_5;
output   out_data_5_ap_vld;
output  [15:0] out_data_6;
output   out_data_6_ap_vld;
output  [15:0] out_data_7;
output   out_data_7_ap_vld;
output  [15:0] out_data_8;
output   out_data_8_ap_vld;
output  [15:0] out_data_9;
output   out_data_9_ap_vld;
output  [15:0] out_data_10;
output   out_data_10_ap_vld;
output  [15:0] out_data_11;
output   out_data_11_ap_vld;
output  [15:0] out_data_12;
output   out_data_12_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_data_0_ap_vld;
reg out_data_1_ap_vld;
reg out_data_2_ap_vld;
reg out_data_3_ap_vld;
reg out_data_4_ap_vld;
reg out_data_5_ap_vld;
reg out_data_6_ap_vld;
reg out_data_7_ap_vld;
reg out_data_8_ap_vld;
reg out_data_9_ap_vld;
reg out_data_10_ap_vld;
reg out_data_11_ap_vld;
reg out_data_12_ap_vld;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [7:0] m26_fu_277_p2;
reg  signed [7:0] m26_reg_997;
wire   [4:0] trunc_ln123_fu_283_p1;
reg   [4:0] trunc_ln123_reg_1003;
wire   [9:0] in7_fu_287_p1;
reg   [9:0] in7_reg_1008;
wire    ap_CS_fsm_state2;
wire  signed [5:0] in20_fu_295_p1;
reg  signed [5:0] in20_reg_1013;
wire  signed [7:0] m29_fu_315_p2;
reg  signed [7:0] m29_reg_1018;
wire   [5:0] mul_ln123_fu_324_p2;
reg   [5:0] mul_ln123_reg_1024;
wire   [2:0] trunc_ln125_1_fu_330_p1;
reg   [2:0] trunc_ln125_1_reg_1029;
wire   [3:0] trunc_ln128_fu_334_p1;
reg   [3:0] trunc_ln128_reg_1034;
wire  signed [8:0] m22_fu_363_p1;
reg  signed [8:0] m22_reg_1039;
wire    ap_CS_fsm_state3;
wire   [6:0] trunc_ln127_1_fu_372_p1;
reg   [6:0] trunc_ln127_1_reg_1044;
wire  signed [9:0] sext_ln132_1_fu_376_p1;
reg  signed [9:0] sext_ln132_1_reg_1049;
wire  signed [9:0] mul_ln132_fu_383_p2;
reg  signed [9:0] mul_ln132_reg_1054;
wire  signed [9:0] trunc_ln140_fu_398_p1;
reg  signed [9:0] trunc_ln140_reg_1060;
wire   [7:0] trunc_ln141_2_fu_402_p1;
reg   [7:0] trunc_ln141_2_reg_1065;
wire   [8:0] trunc_ln161_fu_406_p1;
reg   [8:0] trunc_ln161_reg_1070;
wire  signed [8:0] in8_fu_410_p1;
reg  signed [8:0] in8_reg_1075;
wire    ap_CS_fsm_state4;
wire  signed [3:0] in16_fu_418_p1;
reg  signed [3:0] in16_reg_1080;
wire  signed [9:0] m24_fu_433_p2;
reg  signed [9:0] m24_reg_1085;
wire   [12:0] mul_ln120_fu_447_p2;
reg  signed [12:0] mul_ln120_reg_1091;
wire   [8:0] m28_fu_453_p2;
reg   [8:0] m28_reg_1096;
wire  signed [2:0] m32_fu_462_p2;
reg  signed [2:0] m32_reg_1101;
wire  signed [4:0] m35_fu_487_p2;
reg  signed [4:0] m35_reg_1107;
wire  signed [9:0] m36_fu_497_p2;
reg  signed [9:0] m36_reg_1117;
wire  signed [6:0] trunc_ln151_fu_503_p1;
reg  signed [6:0] trunc_ln151_reg_1122;
wire  signed [9:0] m39_fu_511_p2;
reg  signed [9:0] m39_reg_1127;
wire  signed [7:0] trunc_ln135_1_fu_516_p1;
reg  signed [7:0] trunc_ln135_1_reg_1132;
wire  signed [9:0] mul_ln140_1_fu_520_p2;
reg  signed [9:0] mul_ln140_1_reg_1137;
wire  signed [8:0] trunc_ln141_fu_524_p1;
reg  signed [8:0] trunc_ln141_reg_1143;
wire  signed [3:0] trunc_ln144_2_fu_528_p1;
reg  signed [3:0] trunc_ln144_2_reg_1148;
wire  signed [4:0] trunc_ln160_1_fu_532_p1;
reg  signed [4:0] trunc_ln160_1_reg_1153;
wire  signed [7:0] trunc_ln152_fu_536_p1;
reg  signed [7:0] trunc_ln152_reg_1158;
wire  signed [6:0] m38_fu_582_p2;
reg  signed [6:0] m38_reg_1163;
wire    ap_CS_fsm_state5;
wire   [7:0] mul_ln135_fu_606_p2;
reg   [7:0] mul_ln135_reg_1168;
wire  signed [9:0] m45_fu_635_p1;
reg  signed [9:0] m45_reg_1173;
wire  signed [8:0] m48_fu_655_p2;
reg  signed [8:0] m48_reg_1178;
wire  signed [3:0] trunc_ln144_fu_660_p1;
reg  signed [3:0] trunc_ln144_reg_1183;
wire  signed [3:0] mul_ln144_fu_668_p2;
reg  signed [3:0] mul_ln144_reg_1188;
wire  signed [12:0] trunc_ln145_fu_673_p1;
reg  signed [12:0] trunc_ln145_reg_1193;
wire  signed [5:0] trunc_ln146_fu_677_p1;
reg  signed [5:0] trunc_ln146_reg_1198;
wire   [7:0] trunc_ln148_fu_681_p1;
reg   [7:0] trunc_ln148_reg_1203;
wire  signed [4:0] trunc_ln160_fu_685_p1;
reg  signed [4:0] trunc_ln160_reg_1208;
wire  signed [7:0] mul_ln152_fu_689_p2;
reg  signed [7:0] mul_ln152_reg_1213;
wire  signed [10:0] trunc_ln153_fu_694_p1;
reg  signed [10:0] trunc_ln153_reg_1218;
wire  signed [4:0] trunc_ln154_fu_698_p1;
reg  signed [4:0] trunc_ln154_reg_1223;
wire  signed [7:0] trunc_ln159_fu_702_p1;
reg  signed [7:0] trunc_ln159_reg_1228;
wire  signed [9:0] mul_ln161_1_fu_706_p2;
reg  signed [9:0] mul_ln161_1_reg_1233;
wire   [5:0] m53_fu_744_p2;
reg  signed [5:0] m53_reg_1238;
wire    ap_CS_fsm_state6;
wire  signed [7:0] m59_fu_749_p2;
reg  signed [7:0] m59_reg_1243;
wire   [4:0] mul_ln154_fu_753_p2;
reg   [4:0] mul_ln154_reg_1248;
wire  signed [4:0] trunc_ln160_2_fu_757_p1;
reg  signed [4:0] trunc_ln160_2_reg_1253;
wire  signed [9:0] mul_ln161_fu_761_p2;
reg  signed [9:0] mul_ln161_reg_1258;
wire   [12:0] m52_fu_781_p2;
reg  signed [12:0] m52_reg_1263;
wire    ap_CS_fsm_state7;
wire  signed [5:0] shl_ln_fu_786_p3;
reg  signed [5:0] shl_ln_reg_1268;
wire  signed [4:0] m61_fu_809_p2;
reg  signed [4:0] m61_reg_1273;
wire  signed [10:0] m63_fu_836_p2;
reg  signed [10:0] m63_reg_1278;
wire  signed [13:0] trunc_ln157_fu_842_p1;
reg  signed [13:0] trunc_ln157_reg_1283;
wire  signed [9:0] trunc_ln168_fu_849_p1;
reg  signed [9:0] trunc_ln168_reg_1288;
wire  signed [4:0] m67_fu_857_p2;
reg  signed [4:0] m67_reg_1293;
wire   [9:0] mul_ln161_2_fu_862_p2;
reg   [9:0] mul_ln161_2_reg_1299;
wire   [13:0] m64_fu_883_p2;
reg  signed [13:0] m64_reg_1309;
wire    ap_CS_fsm_state8;
wire  signed [5:0] trunc_ln166_fu_908_p1;
reg  signed [5:0] trunc_ln166_reg_1314;
wire  signed [8:0] trunc_ln167_fu_912_p1;
reg  signed [8:0] trunc_ln167_reg_1319;
wire   [14:0] m70_fu_927_p2;
reg  signed [14:0] m70_reg_1324;
wire    ap_CS_fsm_state9;
wire   [15:0] mul_ln165_fu_971_p2;
wire    ap_CS_fsm_state10;
wire  signed [7:0] m26_fu_277_p0;
wire  signed [7:0] m26_fu_277_p1;
wire   [4:0] trunc_ln116_fu_299_p1;
wire  signed [3:0] in14_fu_291_p1;
wire   [4:0] mul_ln123_fu_324_p0;
wire   [4:0] mul_ln123_fu_324_p1;
wire  signed [4:0] in10_fu_341_p1;
wire   [8:0] trunc_ln115_fu_349_p1;
wire   [8:0] mul_ln115_fu_357_p0;
wire   [13:0] mul_ln115_fu_357_p2;
wire  signed [5:0] m30_fu_367_p2;
wire   [9:0] mul_ln140_fu_392_p0;
wire   [10:0] mul_ln140_fu_392_p2;
wire  signed [8:0] in9_fu_414_p1;
wire  signed [9:0] sext_ln117_fu_426_p1;
wire  signed [9:0] sext_ln117_1_fu_430_p1;
wire  signed [3:0] in21_fu_422_p1;
wire   [2:0] trunc_ln125_fu_458_p1;
wire   [6:0] trunc_ln127_fu_467_p1;
wire  signed [4:0] m35_fu_487_p0;
wire  signed [5:0] m36_fu_497_p0;
wire   [6:0] m34_fu_471_p2;
wire  signed [5:0] in18_fu_545_p1;
wire  signed [5:0] sext_ln124_fu_561_p1;
wire  signed [8:0] sext_ln126_fu_570_p1;
wire  signed [8:0] m33_fu_573_p2;
wire  signed [7:0] mul_ln135_fu_606_p0;
wire   [12:0] mul_ln138_fu_629_p2;
wire  signed [8:0] m48_fu_655_p1;
wire  signed [3:0] mul_ln144_fu_668_p1;
wire   [14:0] mul_ln133_fu_593_p2;
wire  signed [7:0] mul_ln161_1_fu_706_p1;
wire   [14:0] m27_fu_555_p2;
wire   [5:0] m31_fu_564_p2;
wire   [10:0] m44_fu_617_p2;
wire   [9:0] m46_fu_643_p2;
wire  signed [9:0] mul_ln161_fu_761_p0;
wire   [3:0] m51_fu_737_p2;
wire  signed [10:0] m47_fu_771_p3;
wire   [14:0] m62_fu_822_p2;
wire  signed [4:0] mul_ln160_fu_853_p2;
wire   [6:0] m58_fu_796_p2;
wire   [10:0] m60_fu_804_p2;
wire   [9:0] m71_fu_903_p2;
wire   [12:0] m69_fu_894_p2;
wire  signed [7:0] grp_fu_982_p3;
wire   [5:0] m73_fu_936_p2;
wire   [8:0] m74_fu_944_p2;
wire  signed [9:0] m68_fu_959_p2;
wire  signed [9:0] grp_fu_988_p3;
wire  signed [9:0] grp_fu_988_p0;
wire  signed [9:0] grp_fu_988_p2;
reg   [9:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire   [13:0] mul_ln115_fu_357_p00;
wire   [5:0] mul_ln123_fu_324_p00;
wire   [5:0] mul_ln123_fu_324_p10;
wire   [10:0] mul_ln140_fu_392_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

case_2_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U1(
    .din0(m26_fu_277_p0),
    .din1(m26_fu_277_p1),
    .dout(m26_fu_277_p2)
);

case_2_mul_6s_4s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
mul_6s_4s_8_1_1_U2(
    .din0(in20_fu_295_p1),
    .din1(in14_fu_291_p1),
    .dout(m29_fu_315_p2)
);

case_2_mul_5ns_5ns_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 6 ))
mul_5ns_5ns_6_1_1_U3(
    .din0(mul_ln123_fu_324_p0),
    .din1(mul_ln123_fu_324_p1),
    .dout(mul_ln123_fu_324_p2)
);

case_2_mul_9ns_5s_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 14 ))
mul_9ns_5s_14_1_1_U4(
    .din0(mul_ln115_fu_357_p0),
    .din1(in10_fu_341_p1),
    .dout(mul_ln115_fu_357_p2)
);

case_2_mul_8s_6s_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 10 ))
mul_8s_6s_10_1_1_U5(
    .din0(m29_reg_1018),
    .din1(m30_fu_367_p2),
    .dout(mul_ln132_fu_383_p2)
);

case_2_mul_10ns_8s_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 11 ))
mul_10ns_8s_11_1_1_U6(
    .din0(mul_ln140_fu_392_p0),
    .din1(m29_reg_1018),
    .dout(mul_ln140_fu_392_p2)
);

case_2_mul_9s_4s_13_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 13 ))
mul_9s_4s_13_1_1_U7(
    .din0(in8_fu_410_p1),
    .din1(in21_fu_422_p1),
    .dout(mul_ln120_fu_447_p2)
);

case_2_mul_9s_9s_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
mul_9s_9s_9_1_1_U8(
    .din0(m22_reg_1039),
    .din1(in9_fu_414_p1),
    .dout(m28_fu_453_p2)
);

case_2_mul_5s_4s_5_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 5 ))
mul_5s_4s_5_1_1_U9(
    .din0(m35_fu_487_p0),
    .din1(in16_fu_418_p1),
    .dout(m35_fu_487_p2)
);

case_2_mul_6s_4s_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 10 ))
mul_6s_4s_10_1_1_U10(
    .din0(m36_fu_497_p0),
    .din1(in16_fu_418_p1),
    .dout(m36_fu_497_p2)
);

case_2_mul_10s_4s_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 10 ))
mul_10s_4s_10_1_1_U11(
    .din0(mul_ln132_reg_1054),
    .din1(in21_fu_422_p1),
    .dout(m39_fu_511_p2)
);

case_2_mul_10s_10s_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
mul_10s_10s_10_1_1_U12(
    .din0(trunc_ln140_reg_1060),
    .din1(mul_ln132_reg_1054),
    .dout(mul_ln140_1_fu_520_p2)
);

case_2_mul_13s_9s_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 15 ))
mul_13s_9s_15_1_1_U13(
    .din0(mul_ln120_reg_1091),
    .din1(in8_reg_1075),
    .dout(m27_fu_555_p2)
);

case_2_mul_7s_6s_7_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 7 ))
mul_7s_6s_7_1_1_U14(
    .din0(trunc_ln151_reg_1122),
    .din1(in18_fu_545_p1),
    .dout(m38_fu_582_p2)
);

case_2_mul_10s_5s_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 15 ))
mul_10s_5s_15_1_1_U15(
    .din0(m39_reg_1127),
    .din1(m35_reg_1107),
    .dout(mul_ln133_fu_593_p2)
);

case_2_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U16(
    .din0(mul_ln135_fu_606_p0),
    .din1(trunc_ln135_1_reg_1132),
    .dout(mul_ln135_fu_606_p2)
);

case_2_mul_10s_5s_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 11 ))
mul_10s_5s_11_1_1_U17(
    .din0(m24_reg_1085),
    .din1(m35_reg_1107),
    .dout(m44_fu_617_p2)
);

case_2_mul_10s_3s_13_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 13 ))
mul_10s_3s_13_1_1_U18(
    .din0(m24_reg_1085),
    .din1(m32_reg_1101),
    .dout(mul_ln138_fu_629_p2)
);

case_2_mul_10s_9s_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 10 ))
mul_10s_9s_10_1_1_U19(
    .din0(m36_reg_1117),
    .din1(m33_fu_573_p2),
    .dout(m46_fu_643_p2)
);

case_2_mul_9s_9s_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
mul_9s_9s_9_1_1_U20(
    .din0(trunc_ln141_reg_1143),
    .din1(m48_fu_655_p1),
    .dout(m48_fu_655_p2)
);

case_2_mul_4s_4s_4_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 4 ))
mul_4s_4s_4_1_1_U21(
    .din0(trunc_ln144_2_reg_1148),
    .din1(mul_ln144_fu_668_p1),
    .dout(mul_ln144_fu_668_p2)
);

case_2_mul_8s_5s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
mul_8s_5s_8_1_1_U22(
    .din0(trunc_ln152_reg_1158),
    .din1(m35_reg_1107),
    .dout(mul_ln152_fu_689_p2)
);

case_2_mul_10s_8s_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 10 ))
mul_10s_8s_10_1_1_U23(
    .din0(mul_ln140_1_reg_1137),
    .din1(mul_ln161_1_fu_706_p1),
    .dout(mul_ln161_1_fu_706_p2)
);

case_2_mul_4s_4s_4_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 4 ))
mul_4s_4s_4_1_1_U24(
    .din0(mul_ln144_reg_1188),
    .din1(trunc_ln144_reg_1183),
    .dout(m51_fu_737_p2)
);

case_2_mul_6s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_6s_3s_6_1_1_U25(
    .din0(trunc_ln146_reg_1198),
    .din1(m32_reg_1101),
    .dout(m53_fu_744_p2)
);

case_2_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U26(
    .din0(mul_ln152_reg_1213),
    .din1(m26_reg_997),
    .dout(m59_fu_749_p2)
);

case_2_mul_5s_5s_5_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 5 ))
mul_5s_5s_5_1_1_U27(
    .din0(m35_reg_1107),
    .din1(trunc_ln154_reg_1223),
    .dout(mul_ln154_fu_753_p2)
);

case_2_mul_10s_10s_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
mul_10s_10s_10_1_1_U28(
    .din0(mul_ln161_fu_761_p0),
    .din1(m45_reg_1173),
    .dout(mul_ln161_fu_761_p2)
);

case_2_mul_13s_5s_13_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 13 ))
mul_13s_5s_13_1_1_U29(
    .din0(trunc_ln145_reg_1193),
    .din1(m35_reg_1107),
    .dout(m52_fu_781_p2)
);

case_2_mul_7s_6s_7_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 7 ))
mul_7s_6s_7_1_1_U30(
    .din0(m38_reg_1163),
    .din1(m53_reg_1238),
    .dout(m58_fu_796_p2)
);

case_2_mul_11s_8s_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 11 ))
mul_11s_8s_11_1_1_U31(
    .din0(trunc_ln153_reg_1218),
    .din1(m59_reg_1243),
    .dout(m60_fu_804_p2)
);

case_2_mul_11s_5s_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 15 ))
mul_11s_5s_15_1_1_U32(
    .din0(m47_fu_771_p3),
    .din1(m61_fu_809_p2),
    .dout(m62_fu_822_p2)
);

case_2_mul_6s_5s_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 11 ))
mul_6s_5s_11_1_1_U33(
    .din0(shl_ln_fu_786_p3),
    .din1(m61_fu_809_p2),
    .dout(m63_fu_836_p2)
);

case_2_mul_5s_5s_5_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 5 ))
mul_5s_5s_5_1_1_U34(
    .din0(trunc_ln160_1_reg_1153),
    .din1(trunc_ln160_2_reg_1253),
    .dout(mul_ln160_fu_853_p2)
);

case_2_mul_5s_5s_5_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 5 ))
mul_5s_5s_5_1_1_U35(
    .din0(mul_ln160_fu_853_p2),
    .din1(trunc_ln160_reg_1208),
    .dout(m67_fu_857_p2)
);

case_2_mul_10s_10s_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
mul_10s_10s_10_1_1_U36(
    .din0(mul_ln161_1_reg_1233),
    .din1(mul_ln161_reg_1258),
    .dout(mul_ln161_2_fu_862_p2)
);

case_2_mul_14s_13s_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 14 ))
mul_14s_13s_14_1_1_U37(
    .din0(trunc_ln157_reg_1283),
    .din1(m52_reg_1263),
    .dout(m64_fu_883_p2)
);

case_2_mul_11s_5s_13_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 13 ))
mul_11s_5s_13_1_1_U38(
    .din0(m63_reg_1278),
    .din1(m67_reg_1293),
    .dout(m69_fu_894_p2)
);

case_2_mul_10s_6s_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 10 ))
mul_10s_6s_10_1_1_U39(
    .din0(trunc_ln168_reg_1288),
    .din1(shl_ln_reg_1268),
    .dout(m71_fu_903_p2)
);

case_2_mul_14s_5s_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 15 ))
mul_14s_5s_15_1_1_U40(
    .din0(m64_reg_1309),
    .din1(m67_reg_1293),
    .dout(m70_fu_927_p2)
);

case_2_mul_6s_5s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 6 ))
mul_6s_5s_6_1_1_U41(
    .din0(trunc_ln166_reg_1314),
    .din1(m61_reg_1273),
    .dout(m73_fu_936_p2)
);

case_2_mul_9s_8s_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 9 ))
mul_9s_8s_9_1_1_U42(
    .din0(trunc_ln167_reg_1319),
    .din1(grp_fu_982_p3),
    .dout(m74_fu_944_p2)
);

case_2_mul_15s_10s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 16 ))
mul_15s_10s_16_1_1_U43(
    .din0(m70_reg_1324),
    .din1(m68_fu_959_p2),
    .dout(mul_ln165_fu_971_p2)
);

case_2_am_addmul_8ns_8ns_8s_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
am_addmul_8ns_8ns_8s_8_4_1_U44(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln148_reg_1203),
    .din1(mul_ln135_reg_1168),
    .din2(trunc_ln159_reg_1228),
    .ce(1'b1),
    .dout(grp_fu_982_p3)
);

case_2_am_addmul_10s_9s_10s_10_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
am_addmul_10s_9s_10s_10_4_1_U45(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_988_p0),
    .din1(m48_reg_1178),
    .din2(grp_fu_988_p2),
    .ce(1'b1),
    .dout(grp_fu_988_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in16_reg_1080 <= in16_fu_418_p1;
        in8_reg_1075 <= in8_fu_410_p1;
        m24_reg_1085 <= m24_fu_433_p2;
        m28_reg_1096 <= m28_fu_453_p2;
        m32_reg_1101 <= m32_fu_462_p2;
        m35_reg_1107 <= m35_fu_487_p2;
        m36_reg_1117 <= m36_fu_497_p2;
        m39_reg_1127 <= m39_fu_511_p2;
        mul_ln120_reg_1091 <= mul_ln120_fu_447_p2;
        mul_ln140_1_reg_1137 <= mul_ln140_1_fu_520_p2;
        trunc_ln135_1_reg_1132 <= trunc_ln135_1_fu_516_p1;
        trunc_ln141_reg_1143 <= trunc_ln141_fu_524_p1;
        trunc_ln144_2_reg_1148 <= trunc_ln144_2_fu_528_p1;
        trunc_ln151_reg_1122 <= trunc_ln151_fu_503_p1;
        trunc_ln152_reg_1158 <= trunc_ln152_fu_536_p1;
        trunc_ln160_1_reg_1153 <= trunc_ln160_1_fu_532_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in20_reg_1013 <= in20_fu_295_p1;
        in7_reg_1008 <= in7_fu_287_p1;
        m29_reg_1018 <= m29_fu_315_p2;
        mul_ln123_reg_1024 <= mul_ln123_fu_324_p2;
        trunc_ln125_1_reg_1029 <= trunc_ln125_1_fu_330_p1;
        trunc_ln128_reg_1034 <= trunc_ln128_fu_334_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        m22_reg_1039 <= m22_fu_363_p1;
        mul_ln132_reg_1054 <= mul_ln132_fu_383_p2;
        sext_ln132_1_reg_1049 <= sext_ln132_1_fu_376_p1;
        trunc_ln127_1_reg_1044 <= trunc_ln127_1_fu_372_p1;
        trunc_ln140_reg_1060 <= trunc_ln140_fu_398_p1;
        trunc_ln141_2_reg_1065 <= trunc_ln141_2_fu_402_p1;
        trunc_ln161_reg_1070 <= trunc_ln161_fu_406_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        m26_reg_997 <= m26_fu_277_p2;
        trunc_ln123_reg_1003 <= trunc_ln123_fu_283_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m38_reg_1163 <= m38_fu_582_p2;
        m45_reg_1173 <= m45_fu_635_p1;
        m48_reg_1178 <= m48_fu_655_p2;
        mul_ln135_reg_1168 <= mul_ln135_fu_606_p2;
        mul_ln144_reg_1188 <= mul_ln144_fu_668_p2;
        mul_ln152_reg_1213 <= mul_ln152_fu_689_p2;
        mul_ln161_1_reg_1233 <= mul_ln161_1_fu_706_p2;
        trunc_ln144_reg_1183 <= trunc_ln144_fu_660_p1;
        trunc_ln145_reg_1193 <= trunc_ln145_fu_673_p1;
        trunc_ln146_reg_1198 <= trunc_ln146_fu_677_p1;
        trunc_ln148_reg_1203 <= trunc_ln148_fu_681_p1;
        trunc_ln153_reg_1218 <= trunc_ln153_fu_694_p1;
        trunc_ln154_reg_1223 <= trunc_ln154_fu_698_p1;
        trunc_ln159_reg_1228 <= trunc_ln159_fu_702_p1;
        trunc_ln160_reg_1208 <= trunc_ln160_fu_685_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        m52_reg_1263 <= m52_fu_781_p2;
        m61_reg_1273 <= m61_fu_809_p2;
        m63_reg_1278 <= m63_fu_836_p2;
        m67_reg_1293 <= m67_fu_857_p2;
        mul_ln161_2_reg_1299 <= mul_ln161_2_fu_862_p2;
        shl_ln_reg_1268[5 : 1] <= shl_ln_fu_786_p3[5 : 1];
        trunc_ln157_reg_1283 <= trunc_ln157_fu_842_p1;
        trunc_ln168_reg_1288 <= trunc_ln168_fu_849_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        m53_reg_1238 <= m53_fu_744_p2;
        m59_reg_1243 <= m59_fu_749_p2;
        mul_ln154_reg_1248 <= mul_ln154_fu_753_p2;
        mul_ln161_reg_1258 <= mul_ln161_fu_761_p2;
        trunc_ln160_2_reg_1253 <= trunc_ln160_2_fu_757_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        m64_reg_1309 <= m64_fu_883_p2;
        trunc_ln166_reg_1314 <= trunc_ln166_fu_908_p1;
        trunc_ln167_reg_1319 <= trunc_ln167_fu_912_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        m70_reg_1324 <= m70_fu_927_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_data_0_ap_vld = 1'b1;
    end else begin
        out_data_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        out_data_10_ap_vld = 1'b1;
    end else begin
        out_data_10_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        out_data_11_ap_vld = 1'b1;
    end else begin
        out_data_11_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        out_data_12_ap_vld = 1'b1;
    end else begin
        out_data_12_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_data_1_ap_vld = 1'b1;
    end else begin
        out_data_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_data_2_ap_vld = 1'b1;
    end else begin
        out_data_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_data_3_ap_vld = 1'b1;
    end else begin
        out_data_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_data_4_ap_vld = 1'b1;
    end else begin
        out_data_4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_data_5_ap_vld = 1'b1;
    end else begin
        out_data_5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_data_6_ap_vld = 1'b1;
    end else begin
        out_data_6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_data_7_ap_vld = 1'b1;
    end else begin
        out_data_7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_data_8_ap_vld = 1'b1;
    end else begin
        out_data_8_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        out_data_9_ap_vld = 1'b1;
    end else begin
        out_data_9_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_988_p0 = m63_fu_836_p2[9:0];

assign grp_fu_988_p2 = m62_fu_822_p2[9:0];

assign in10_fu_341_p1 = in_data_9[4:0];

assign in14_fu_291_p1 = in_data_13[3:0];

assign in16_fu_418_p1 = in_data_15[3:0];

assign in18_fu_545_p1 = in_data_17[5:0];

assign in20_fu_295_p1 = in_data_19[5:0];

assign in21_fu_422_p1 = in_data_20[3:0];

assign in7_fu_287_p1 = in_data_6[9:0];

assign in8_fu_410_p1 = in_data_7[8:0];

assign in9_fu_414_p1 = in_data_8[8:0];

assign m22_fu_363_p1 = mul_ln115_fu_357_p2[8:0];

assign m24_fu_433_p2 = ($signed(sext_ln117_fu_426_p1) + $signed(sext_ln117_1_fu_430_p1));

assign m26_fu_277_p0 = in_data_16[7:0];

assign m26_fu_277_p1 = in_data_12[7:0];

assign m30_fu_367_p2 = mul_ln123_reg_1024 << 6'd1;

assign m31_fu_564_p2 = ($signed(in18_fu_545_p1) + $signed(sext_ln124_fu_561_p1));

assign m32_fu_462_p2 = (trunc_ln125_fu_458_p1 + trunc_ln125_1_reg_1029);

assign m33_fu_573_p2 = ($signed(sext_ln126_fu_570_p1) + $signed(m28_reg_1096));

assign m34_fu_471_p2 = (trunc_ln127_fu_467_p1 + trunc_ln127_1_reg_1044);

assign m35_fu_487_p0 = {{trunc_ln128_reg_1034}, {1'd0}};

assign m36_fu_497_p0 = sext_ln117_1_fu_430_p1;

assign m45_fu_635_p1 = mul_ln138_fu_629_p2[9:0];

assign m47_fu_771_p3 = {{mul_ln140_1_reg_1137}, {1'd0}};

assign m48_fu_655_p1 = {{trunc_ln141_2_reg_1065}, {1'd0}};

assign m61_fu_809_p2 = mul_ln154_reg_1248 << 5'd1;

assign m68_fu_959_p2 = mul_ln161_2_reg_1299 << 10'd1;

assign mul_ln115_fu_357_p0 = mul_ln115_fu_357_p00;

assign mul_ln115_fu_357_p00 = trunc_ln115_fu_349_p1;

assign mul_ln123_fu_324_p0 = mul_ln123_fu_324_p00;

assign mul_ln123_fu_324_p00 = trunc_ln116_fu_299_p1;

assign mul_ln123_fu_324_p1 = mul_ln123_fu_324_p10;

assign mul_ln123_fu_324_p10 = trunc_ln123_reg_1003;

assign mul_ln135_fu_606_p0 = m33_fu_573_p2[7:0];

assign mul_ln140_fu_392_p0 = mul_ln140_fu_392_p00;

assign mul_ln140_fu_392_p00 = in7_reg_1008;

assign mul_ln144_fu_668_p1 = m48_fu_655_p2[3:0];

assign mul_ln161_1_fu_706_p1 = sext_ln132_1_reg_1049;

assign mul_ln161_fu_761_p0 = {{trunc_ln161_reg_1070}, {1'd0}};

assign out_data_0 = $signed(m27_fu_555_p2);

assign out_data_1 = $signed(m31_fu_564_p2);

assign out_data_10 = $signed(m73_fu_936_p2);

assign out_data_11 = $signed(m74_fu_944_p2);

assign out_data_12 = $signed(grp_fu_988_p3);

assign out_data_2 = $signed(m34_fu_471_p2);

assign out_data_3 = $signed(m44_fu_617_p2);

assign out_data_4 = $signed(m46_fu_643_p2);

assign out_data_5 = $signed(m51_fu_737_p2);

assign out_data_6 = $signed(m58_fu_796_p2);

assign out_data_7 = $signed(m60_fu_804_p2);

assign out_data_8 = $signed(m69_fu_894_p2);

assign out_data_9 = mul_ln165_fu_971_p2;

assign sext_ln117_1_fu_430_p1 = in20_reg_1013;

assign sext_ln117_fu_426_p1 = in9_fu_414_p1;

assign sext_ln124_fu_561_p1 = in16_reg_1080;

assign sext_ln126_fu_570_p1 = m26_reg_997;

assign sext_ln132_1_fu_376_p1 = m29_reg_1018;

assign shl_ln_fu_786_p3 = {{m35_reg_1107}, {1'd0}};

assign trunc_ln115_fu_349_p1 = in_data_18[8:0];

assign trunc_ln116_fu_299_p1 = in_data_6[4:0];

assign trunc_ln123_fu_283_p1 = m26_fu_277_p2[4:0];

assign trunc_ln125_1_fu_330_p1 = in_data_13[2:0];

assign trunc_ln125_fu_458_p1 = in_data_20[2:0];

assign trunc_ln127_1_fu_372_p1 = mul_ln115_fu_357_p2[6:0];

assign trunc_ln127_fu_467_p1 = m28_fu_453_p2[6:0];

assign trunc_ln128_fu_334_p1 = mul_ln123_fu_324_p2[3:0];

assign trunc_ln135_1_fu_516_p1 = m28_fu_453_p2[7:0];

assign trunc_ln140_fu_398_p1 = mul_ln140_fu_392_p2[9:0];

assign trunc_ln141_2_fu_402_p1 = mul_ln140_fu_392_p2[7:0];

assign trunc_ln141_fu_524_p1 = m39_fu_511_p2[8:0];

assign trunc_ln144_2_fu_528_p1 = m35_fu_487_p2[3:0];

assign trunc_ln144_fu_660_p1 = m38_fu_582_p2[3:0];

assign trunc_ln145_fu_673_p1 = mul_ln133_fu_593_p2[12:0];

assign trunc_ln146_fu_677_p1 = m38_fu_582_p2[5:0];

assign trunc_ln148_fu_681_p1 = mul_ln133_fu_593_p2[7:0];

assign trunc_ln151_fu_503_p1 = m36_fu_497_p2[6:0];

assign trunc_ln152_fu_536_p1 = m39_fu_511_p2[7:0];

assign trunc_ln153_fu_694_p1 = mul_ln133_fu_593_p2[10:0];

assign trunc_ln154_fu_698_p1 = m48_fu_655_p2[4:0];

assign trunc_ln157_fu_842_p1 = m62_fu_822_p2[13:0];

assign trunc_ln159_fu_702_p1 = mul_ln138_fu_629_p2[7:0];

assign trunc_ln160_1_fu_532_p1 = m39_fu_511_p2[4:0];

assign trunc_ln160_2_fu_757_p1 = m59_fu_749_p2[4:0];

assign trunc_ln160_fu_685_p1 = mul_ln138_fu_629_p2[4:0];

assign trunc_ln161_fu_406_p1 = mul_ln140_fu_392_p2[8:0];

assign trunc_ln166_fu_908_p1 = m71_fu_903_p2[5:0];

assign trunc_ln167_fu_912_p1 = m71_fu_903_p2[8:0];

assign trunc_ln168_fu_849_p1 = m63_fu_836_p2[9:0];

always @ (posedge ap_clk) begin
    shl_ln_reg_1268[0] <= 1'b0;
end

endmodule //case_2
