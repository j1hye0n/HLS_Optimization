-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity case_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_data_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_data_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_data_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_data_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_data_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_data_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_data_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_data_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_data_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_data_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_data_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_data_11 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_data_12 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_data_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_data_14 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_data_15 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_data_16 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_data_17 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_data_18 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_data_19 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_data_20 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_data_21 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_data_22 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_data_23 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_data_24 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_data_25 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_data_26 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_data_27 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_data_28 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_data_29 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_data_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_data_0_ap_vld : OUT STD_LOGIC;
    out_data_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_data_1_ap_vld : OUT STD_LOGIC;
    out_data_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_data_2_ap_vld : OUT STD_LOGIC;
    out_data_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_data_3_ap_vld : OUT STD_LOGIC;
    out_data_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_data_4_ap_vld : OUT STD_LOGIC;
    out_data_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_data_5_ap_vld : OUT STD_LOGIC;
    out_data_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_data_6_ap_vld : OUT STD_LOGIC;
    out_data_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_data_7_ap_vld : OUT STD_LOGIC;
    out_data_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_data_8_ap_vld : OUT STD_LOGIC;
    out_data_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_data_9_ap_vld : OUT STD_LOGIC;
    out_data_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_data_10_ap_vld : OUT STD_LOGIC;
    out_data_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_data_11_ap_vld : OUT STD_LOGIC;
    out_data_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_data_12_ap_vld : OUT STD_LOGIC;
    out_data_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_data_13_ap_vld : OUT STD_LOGIC;
    out_data_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_data_14_ap_vld : OUT STD_LOGIC;
    out_data_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_data_15_ap_vld : OUT STD_LOGIC;
    out_data_16 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_data_16_ap_vld : OUT STD_LOGIC;
    out_data_17 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_data_17_ap_vld : OUT STD_LOGIC );
end;


architecture behav of case_4 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "case_4_case_4,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.230000,HLS_SYN_LAT=11,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=585,HLS_SYN_LUT=1660,HLS_VERSION=2024_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in18_fu_346_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal in18_reg_1287 : STD_LOGIC_VECTOR (1 downto 0);
    signal in19_fu_350_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal in19_reg_1292 : STD_LOGIC_VECTOR (3 downto 0);
    signal m31_fu_366_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m31_reg_1297 : STD_LOGIC_VECTOR (1 downto 0);
    signal m34_fu_380_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m34_reg_1304 : STD_LOGIC_VECTOR (7 downto 0);
    signal m42_fu_414_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal m42_reg_1309 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln183_fu_418_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln183_reg_1314 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln183_1_fu_422_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln183_1_reg_1320 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln184_fu_426_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln184_reg_1325 : STD_LOGIC_VECTOR (5 downto 0);
    signal m48_fu_434_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal m48_reg_1330 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln194_fu_440_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln194_reg_1335 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln198_fu_444_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln198_reg_1341 : STD_LOGIC_VECTOR (4 downto 0);
    signal m35_fu_465_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal m35_reg_1346 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sext_ln175_fu_488_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln175_reg_1356 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal m39_fu_509_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal m39_reg_1361 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln189_1_fu_515_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln189_1_reg_1366 : STD_LOGIC_VECTOR (4 downto 0);
    signal m44_fu_534_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal m44_reg_1372 : STD_LOGIC_VECTOR (3 downto 0);
    signal m45_fu_557_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal m45_reg_1378 : STD_LOGIC_VECTOR (6 downto 0);
    signal m46_fu_561_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m46_reg_1383 : STD_LOGIC_VECTOR (4 downto 0);
    signal m47_fu_569_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal m47_reg_1388 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln189_fu_581_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln189_reg_1395 : STD_LOGIC_VECTOR (4 downto 0);
    signal m53_fu_587_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m53_reg_1400 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln229_fu_596_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln229_reg_1410 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln206_fu_600_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln206_reg_1415 : STD_LOGIC_VECTOR (3 downto 0);
    signal m43_fu_621_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m43_reg_1420 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal m49_fu_629_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal m49_reg_1426 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln187_fu_634_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln187_reg_1431 : STD_LOGIC_VECTOR (4 downto 0);
    signal m52_fu_640_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m52_reg_1436 : STD_LOGIC_VECTOR (4 downto 0);
    signal m56_fu_648_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal m56_reg_1442 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln195_fu_653_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln195_reg_1447 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln197_fu_660_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln197_reg_1453 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln203_fu_665_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln203_reg_1460 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln217_fu_669_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln217_reg_1465 : STD_LOGIC_VECTOR (4 downto 0);
    signal m54_fu_677_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal m54_reg_1471 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal m58_fu_684_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m58_reg_1476 : STD_LOGIC_VECTOR (7 downto 0);
    signal m62_fu_693_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m62_reg_1481 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln200_fu_703_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln200_reg_1487 : STD_LOGIC_VECTOR (6 downto 0);
    signal m64_fu_712_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal m64_reg_1492 : STD_LOGIC_VECTOR (9 downto 0);
    signal m65_fu_725_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal m65_reg_1497 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1246_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal m67_reg_1506 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln210_fu_754_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln210_reg_1511 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln212_fu_758_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln212_reg_1517 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln214_fu_762_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln214_reg_1522 : STD_LOGIC_VECTOR (3 downto 0);
    signal m78_fu_774_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal m78_reg_1527 : STD_LOGIC_VECTOR (2 downto 0);
    signal m87_fu_788_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal m87_reg_1533 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln225_fu_794_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln225_reg_1538 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln226_fu_797_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln226_reg_1543 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln227_1_fu_801_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln227_1_reg_1549 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1255_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal m57_reg_1554 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal m70_fu_813_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m70_reg_1559 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln223_fu_824_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln223_reg_1565 : STD_LOGIC_VECTOR (12 downto 0);
    signal m74_fu_841_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal m74_reg_1570 : STD_LOGIC_VECTOR (10 downto 0);
    signal m75_fu_846_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal m75_reg_1577 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln244_fu_853_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln244_reg_1582 : STD_LOGIC_VECTOR (7 downto 0);
    signal m80_fu_858_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m80_reg_1587 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln254_fu_862_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln254_reg_1595 : STD_LOGIC_VECTOR (4 downto 0);
    signal m92_fu_873_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m102_fu_881_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal m102_reg_1605 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln242_fu_886_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln242_reg_1611 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln245_fu_890_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln245_reg_1616 : STD_LOGIC_VECTOR (4 downto 0);
    signal m82_fu_910_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal m82_reg_1621 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal m83_fu_918_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal m83_reg_1627 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln227_fu_924_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln227_reg_1632 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln254_fu_928_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln254_reg_1637 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln248_fu_951_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln248_reg_1642 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln254_1_fu_956_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln254_1_reg_1648 : STD_LOGIC_VECTOR (4 downto 0);
    signal m76_fu_976_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal m76_reg_1653 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal m94_fu_1019_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal m94_reg_1658 : STD_LOGIC_VECTOR (12 downto 0);
    signal m95_fu_1027_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal m95_reg_1663 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln234_fu_1041_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln234_reg_1668 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln235_fu_1045_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln235_reg_1673 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln237_fu_1049_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln237_reg_1678 : STD_LOGIC_VECTOR (6 downto 0);
    signal m100_fu_1053_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal m100_reg_1683 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln238_fu_1059_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln238_reg_1688 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln246_fu_1063_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln246_reg_1693 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln246_1_fu_1067_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln246_1_reg_1698 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln246_2_fu_1080_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln246_2_reg_1703 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln253_fu_1088_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln253_reg_1708 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln253_1_fu_1092_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln253_1_reg_1713 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln254_fu_1096_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln254_reg_1718 : STD_LOGIC_VECTOR (4 downto 0);
    signal m110_fu_1139_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal m110_reg_1723 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal mul_ln254_1_fu_1151_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln254_1_reg_1733 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln256_fu_1155_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln256_reg_1738 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln250_fu_1177_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln250_reg_1743 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal mul_ln256_1_fu_1203_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln256_1_reg_1748 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln251_fu_1183_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal mul_ln250_fu_1231_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal m31_fu_366_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal m31_fu_366_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal m34_fu_380_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln192_fu_394_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal in14_fu_342_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal in29_fu_358_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln179_fu_404_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln185_fu_408_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln192_fu_394_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal in23_fu_354_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln172_fu_451_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln172_fu_459_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln172_fu_459_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal in27_fu_477_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln175_1_fu_492_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal m38_fu_495_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m39_fu_509_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln189_1_fu_515_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln178_fu_524_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln178_fu_521_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal m44_fu_534_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal m44_fu_534_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln182_fu_540_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln182_fu_551_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln182_fu_551_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal m47_fu_569_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln189_fu_581_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal m41_fu_528_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln180_fu_617_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal m43_fu_621_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln187_fu_634_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln187_fu_634_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1237_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln200_1_fu_700_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln200_fu_697_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln202_1_fu_721_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal m65_fu_725_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal m66_fu_735_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal m60_fu_689_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m68_fu_748_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal m50_fu_673_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m78_fu_774_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal m78_fu_774_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal m87_fu_788_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal m87_fu_788_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal m66_fu_735_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln210_fu_830_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal m102_fu_881_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal m73_fu_833_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal m88_fu_865_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal m107_fu_938_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m108_fu_946_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln213_1_fu_973_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal m85_fu_991_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln222_1_fu_988_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal m93_fu_1010_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal m90_fu_1002_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1262_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal m95_fu_1027_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln233_fu_1033_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal m77_fu_981_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal m96_fu_1036_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln243_fu_1071_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal m85_fu_991_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal m86_fu_997_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal m93_fu_1010_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal m106_fu_1075_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal m111_fu_1084_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal m101_fu_1132_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1270_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln254_1_fu_1151_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal m98_fu_1128_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal m101_fu_1132_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal m116_fu_1147_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal m117_fu_1190_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m118_fu_1198_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal m118_fu_1198_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln256_2_fu_1214_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m119_fu_1218_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1279_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln250_fu_1231_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1237_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1246_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal m89_fu_869_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal mul_ln172_fu_459_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln182_fu_551_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component case_4_mul_2s_2s_2_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component case_4_mul_8s_2s_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component case_4_mul_7s_4s_7_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component case_4_mul_12s_7s_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component case_4_mul_9ns_8s_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component case_4_mul_9s_5s_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component case_4_mul_5s_2s_5_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component case_4_mul_4s_2s_4_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component case_4_mul_7ns_2s_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component case_4_mul_6s_6s_6_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component case_4_mul_5s_5s_5_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component case_4_mul_5s_3s_5_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component case_4_mul_9s_6s_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component case_4_mul_10s_7s_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component case_4_mul_5s_4s_5_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component case_4_mul_9s_9s_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component case_4_mul_8s_4s_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component case_4_mul_10s_6s_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component case_4_mul_4s_4s_4_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component case_4_mul_3s_3s_3_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component case_4_mul_7s_5s_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component case_4_mul_8s_5s_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component case_4_mul_9s_7s_13_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component case_4_mul_11s_4s_11_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component case_4_mul_7s_7s_7_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component case_4_mul_13s_8s_13_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component case_4_mul_11s_7s_13_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component case_4_mul_6s_5s_6_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component case_4_mul_11s_4s_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component case_4_mul_13s_10s_13_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component case_4_mul_13s_5s_13_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component case_4_mul_13s_11s_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component case_4_mul_12s_12s_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component case_4_mul_14s_5s_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component case_4_mul_14s_13s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component case_4_mul_14s_11s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component case_4_am_addmul_7s_2s_7s_7_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component case_4_mac_muladd_5s_5s_5s_5_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component case_4_am_addmul_7s_2s_5s_7_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component case_4_am_addmul_5s_5ns_5s_5_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component case_4_am_addmul_5s_3s_5s_5_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component case_4_am_addmul_11s_8s_7s_11_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    mul_2s_2s_2_1_1_U1 : component case_4_mul_2s_2s_2_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 2,
        dout_WIDTH => 2)
    port map (
        din0 => m31_fu_366_p0,
        din1 => m31_fu_366_p1,
        dout => m31_fu_366_p2);

    mul_8s_2s_8_1_1_U2 : component case_4_mul_8s_2s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => m34_fu_380_p0,
        din1 => m31_fu_366_p2,
        dout => m34_fu_380_p2);

    mul_7s_4s_7_1_1_U3 : component case_4_mul_7s_4s_7_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 4,
        dout_WIDTH => 7)
    port map (
        din0 => mul_ln192_fu_394_p0,
        din1 => in19_fu_350_p1,
        dout => mul_ln192_fu_394_p2);

    mul_12s_7s_12_1_1_U4 : component case_4_mul_12s_7s_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 7,
        dout_WIDTH => 12)
    port map (
        din0 => add_ln185_fu_408_p2,
        din1 => in23_fu_354_p1,
        dout => m48_fu_434_p2);

    mul_9ns_8s_10_1_1_U5 : component case_4_mul_9ns_8s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 8,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln172_fu_459_p0,
        din1 => m34_reg_1304,
        dout => mul_ln172_fu_459_p2);

    mul_9s_5s_9_1_1_U6 : component case_4_mul_9s_5s_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 5,
        dout_WIDTH => 9)
    port map (
        din0 => m39_fu_509_p0,
        din1 => m38_fu_495_p2,
        dout => m39_fu_509_p2);

    mul_5s_2s_5_1_1_U7 : component case_4_mul_5s_2s_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 2,
        dout_WIDTH => 5)
    port map (
        din0 => mul_ln189_1_fu_515_p0,
        din1 => in18_reg_1287,
        dout => mul_ln189_1_fu_515_p2);

    mul_4s_2s_4_1_1_U8 : component case_4_mul_4s_2s_4_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 2,
        dout_WIDTH => 4)
    port map (
        din0 => m44_fu_534_p0,
        din1 => m44_fu_534_p1,
        dout => m44_fu_534_p2);

    mul_7ns_2s_9_1_1_U9 : component case_4_mul_7ns_2s_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 2,
        dout_WIDTH => 9)
    port map (
        din0 => mul_ln182_fu_551_p0,
        din1 => m31_reg_1297,
        dout => mul_ln182_fu_551_p2);

    mul_6s_6s_6_1_1_U10 : component case_4_mul_6s_6s_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        dout_WIDTH => 6)
    port map (
        din0 => trunc_ln184_reg_1325,
        din1 => m47_fu_569_p1,
        dout => m47_fu_569_p2);

    mul_5s_5s_5_1_1_U11 : component case_4_mul_5s_5s_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => mul_ln189_fu_581_p0,
        din1 => mul_ln189_1_fu_515_p2,
        dout => mul_ln189_fu_581_p2);

    mul_5s_3s_5_1_1_U12 : component case_4_mul_5s_3s_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 3,
        dout_WIDTH => 5)
    port map (
        din0 => trunc_ln180_fu_617_p1,
        din1 => m43_fu_621_p1,
        dout => m43_fu_621_p2);

    mul_9s_6s_9_1_1_U13 : component case_4_mul_9s_6s_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 6,
        dout_WIDTH => 9)
    port map (
        din0 => m39_reg_1361,
        din1 => m47_reg_1388,
        dout => m49_fu_629_p2);

    mul_5s_5s_5_1_1_U14 : component case_4_mul_5s_5s_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => mul_ln187_fu_634_p0,
        din1 => mul_ln187_fu_634_p1,
        dout => mul_ln187_fu_634_p2);

    mul_5s_5s_5_1_1_U15 : component case_4_mul_5s_5s_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => mul_ln189_reg_1395,
        din1 => trunc_ln180_fu_617_p1,
        dout => m52_fu_640_p2);

    mul_10s_7s_10_1_1_U16 : component case_4_mul_10s_7s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 7,
        dout_WIDTH => 10)
    port map (
        din0 => m42_reg_1309,
        din1 => grp_fu_1237_p3,
        dout => m56_fu_648_p2);

    mul_5s_4s_5_1_1_U17 : component case_4_mul_5s_4s_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        dout_WIDTH => 5)
    port map (
        din0 => m53_reg_1400,
        din1 => m44_reg_1372,
        dout => mul_ln197_fu_660_p2);

    mul_5s_5s_5_1_1_U18 : component case_4_mul_5s_5s_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => mul_ln187_reg_1431,
        din1 => mul_ln189_1_reg_1366,
        dout => m50_fu_673_p2);

    mul_9s_9s_9_1_1_U19 : component case_4_mul_9s_9s_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        din0 => m35_reg_1346,
        din1 => m49_reg_1426,
        dout => m54_fu_677_p2);

    mul_8s_4s_8_1_1_U20 : component case_4_mul_8s_4s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => trunc_ln195_reg_1447,
        din1 => m44_reg_1372,
        dout => m58_fu_684_p2);

    mul_5s_5s_5_1_1_U21 : component case_4_mul_5s_5s_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => mul_ln197_reg_1453,
        din1 => mul_ln189_1_reg_1366,
        dout => m60_fu_689_p2);

    mul_5s_5s_5_1_1_U22 : component case_4_mul_5s_5s_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => m52_reg_1436,
        din1 => trunc_ln229_reg_1410,
        dout => m62_fu_693_p2);

    mul_10s_6s_10_1_1_U23 : component case_4_mul_10s_6s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 6,
        dout_WIDTH => 10)
    port map (
        din0 => m56_reg_1442,
        din1 => m47_reg_1388,
        dout => m64_fu_712_p2);

    mul_4s_4s_4_1_1_U24 : component case_4_mul_4s_4s_4_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        din0 => trunc_ln202_1_fu_721_p1,
        din1 => m65_fu_725_p1,
        dout => m65_fu_725_p2);

    mul_3s_3s_3_1_1_U25 : component case_4_mul_3s_3s_3_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 3,
        dout_WIDTH => 3)
    port map (
        din0 => m66_fu_735_p0,
        din1 => trunc_ln203_reg_1460,
        dout => m66_fu_735_p2);

    mul_7s_5s_12_1_1_U26 : component case_4_mul_7s_5s_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 5,
        dout_WIDTH => 12)
    port map (
        din0 => add_ln200_fu_703_p2,
        din1 => m60_fu_689_p2,
        dout => m68_fu_748_p2);

    mul_3s_3s_3_1_1_U27 : component case_4_mul_3s_3s_3_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 3,
        dout_WIDTH => 3)
    port map (
        din0 => m78_fu_774_p0,
        din1 => m78_fu_774_p1,
        dout => m78_fu_774_p2);

    mul_3s_3s_3_1_1_U28 : component case_4_mul_3s_3s_3_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 3,
        dout_WIDTH => 3)
    port map (
        din0 => m87_fu_788_p0,
        din1 => m87_fu_788_p1,
        dout => m87_fu_788_p2);

    mul_8s_5s_8_1_1_U29 : component case_4_mul_8s_5s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 5,
        dout_WIDTH => 8)
    port map (
        din0 => m58_reg_1476,
        din1 => m43_reg_1420,
        dout => m70_fu_813_p2);

    mul_9s_7s_13_1_1_U30 : component case_4_mul_9s_7s_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 7,
        dout_WIDTH => 13)
    port map (
        din0 => m54_reg_1471,
        din1 => add_ln200_reg_1487,
        dout => mul_ln223_fu_824_p2);

    mul_11s_4s_11_1_1_U31 : component case_4_mul_11s_4s_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 4,
        dout_WIDTH => 11)
    port map (
        din0 => trunc_ln210_reg_1511,
        din1 => m65_reg_1497,
        dout => m74_fu_841_p2);

    mul_7s_7s_7_1_1_U32 : component case_4_mul_7s_7s_7_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 7,
        dout_WIDTH => 7)
    port map (
        din0 => m45_reg_1378,
        din1 => trunc_ln212_reg_1517,
        dout => m75_fu_846_p2);

    mul_8s_4s_8_1_1_U33 : component case_4_mul_8s_4s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => trunc_ln195_reg_1447,
        din1 => m65_reg_1497,
        dout => mul_ln244_fu_853_p2);

    mul_5s_5s_5_1_1_U34 : component case_4_mul_5s_5s_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => m67_reg_1506,
        din1 => trunc_ln217_reg_1465,
        dout => m80_fu_858_p2);

    mul_4s_4s_4_1_1_U35 : component case_4_mul_4s_4s_4_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        din0 => trunc_ln225_reg_1538,
        din1 => m65_reg_1497,
        dout => m88_fu_865_p2);

    mul_5s_5s_5_1_1_U36 : component case_4_mul_5s_5s_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => trunc_ln226_reg_1543,
        din1 => mul_ln197_reg_1453,
        dout => m89_fu_869_p2);

    mul_5s_5s_5_1_1_U37 : component case_4_mul_5s_5s_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => trunc_ln226_reg_1543,
        din1 => m62_reg_1481,
        dout => m92_fu_873_p2);

    mul_3s_3s_3_1_1_U38 : component case_4_mul_3s_3s_3_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 3,
        dout_WIDTH => 3)
    port map (
        din0 => m102_fu_881_p0,
        din1 => m78_reg_1527,
        dout => m102_fu_881_p2);

    mul_13s_8s_13_1_1_U39 : component case_4_mul_13s_8s_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 8,
        dout_WIDTH => 13)
    port map (
        din0 => mul_ln223_reg_1565,
        din1 => m70_reg_1559,
        dout => m82_fu_910_p2);

    mul_11s_7s_13_1_1_U40 : component case_4_mul_11s_7s_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 7,
        dout_WIDTH => 13)
    port map (
        din0 => m74_reg_1570,
        din1 => m57_reg_1554,
        dout => m83_fu_918_p2);

    mul_8s_5s_8_1_1_U41 : component case_4_mul_8s_5s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 5,
        dout_WIDTH => 8)
    port map (
        din0 => mul_ln244_reg_1582,
        din1 => m80_reg_1587,
        dout => m107_fu_938_p2);

    mul_5s_3s_5_1_1_U42 : component case_4_mul_5s_3s_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 3,
        dout_WIDTH => 5)
    port map (
        din0 => trunc_ln245_reg_1616,
        din1 => m87_reg_1533,
        dout => m108_fu_946_p2);

    mul_6s_5s_6_1_1_U43 : component case_4_mul_6s_5s_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 5,
        dout_WIDTH => 6)
    port map (
        din0 => trunc_ln242_reg_1611,
        din1 => m80_reg_1587,
        dout => mul_ln248_fu_951_p2);

    mul_4s_4s_4_1_1_U44 : component case_4_mul_4s_4s_4_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        din0 => add_ln214_reg_1522,
        din1 => m65_reg_1497,
        dout => m77_fu_981_p2);

    mul_11s_4s_14_1_1_U45 : component case_4_mul_11s_4s_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 4,
        dout_WIDTH => 14)
    port map (
        din0 => m85_fu_991_p0,
        din1 => m65_reg_1497,
        dout => m85_fu_991_p2);

    mul_13s_10s_13_1_1_U46 : component case_4_mul_13s_10s_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 10,
        dout_WIDTH => 13)
    port map (
        din0 => m82_reg_1621,
        din1 => m64_reg_1492,
        dout => m86_fu_997_p2);

    mul_7s_7s_7_1_1_U47 : component case_4_mul_7s_7s_7_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 7,
        dout_WIDTH => 7)
    port map (
        din0 => m93_fu_1010_p0,
        din1 => m90_fu_1002_p2,
        dout => m93_fu_1010_p2);

    mul_13s_5s_13_1_1_U48 : component case_4_mul_13s_5s_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 5,
        dout_WIDTH => 13)
    port map (
        din0 => m82_reg_1621,
        din1 => grp_fu_1262_p3,
        dout => m94_fu_1019_p2);

    mul_13s_11s_14_1_1_U49 : component case_4_mul_13s_11s_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 11,
        dout_WIDTH => 14)
    port map (
        din0 => m83_reg_1627,
        din1 => m95_fu_1027_p1,
        dout => m95_fu_1027_p2);

    mul_7s_4s_7_1_1_U50 : component case_4_mul_7s_4s_7_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 4,
        dout_WIDTH => 7)
    port map (
        din0 => m90_fu_1002_p2,
        din1 => m77_fu_981_p2,
        dout => m100_fu_1053_p2);

    mul_6s_6s_6_1_1_U51 : component case_4_mul_6s_6s_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        dout_WIDTH => 6)
    port map (
        din0 => mul_ln248_reg_1642,
        din1 => mul_ln248_reg_1642,
        dout => m111_fu_1084_p2);

    mul_5s_5s_5_1_1_U52 : component case_4_mul_5s_5s_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => trunc_ln217_reg_1465,
        din1 => trunc_ln254_1_reg_1648,
        dout => mul_ln254_fu_1096_p2);

    mul_12s_12s_12_1_1_U53 : component case_4_mul_12s_12s_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => trunc_ln235_reg_1673,
        din1 => m76_reg_1653,
        dout => m98_fu_1128_p2);

    mul_7s_4s_7_1_1_U54 : component case_4_mul_7s_4s_7_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 4,
        dout_WIDTH => 7)
    port map (
        din0 => trunc_ln238_reg_1688,
        din1 => m101_fu_1132_p1,
        dout => m101_fu_1132_p2);

    mul_14s_5s_14_1_1_U55 : component case_4_mul_14s_5s_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 5,
        dout_WIDTH => 14)
    port map (
        din0 => m95_reg_1663,
        din1 => m80_reg_1587,
        dout => m110_fu_1139_p2);

    mul_6s_6s_6_1_1_U56 : component case_4_mul_6s_6s_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        dout_WIDTH => 6)
    port map (
        din0 => trunc_ln253_reg_1708,
        din1 => trunc_ln253_1_reg_1713,
        dout => m116_fu_1147_p2);

    mul_5s_3s_5_1_1_U57 : component case_4_mul_5s_3s_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 3,
        dout_WIDTH => 5)
    port map (
        din0 => grp_fu_1270_p3,
        din1 => mul_ln254_1_fu_1151_p1,
        dout => mul_ln254_1_fu_1151_p2);

    mul_5s_5s_5_1_1_U58 : component case_4_mul_5s_5s_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => trunc_ln246_reg_1693,
        din1 => trunc_ln246_1_reg_1698,
        dout => mul_ln256_fu_1155_p2);

    mul_14s_13s_16_1_1_U59 : component case_4_mul_14s_13s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 13,
        dout_WIDTH => 16)
    port map (
        din0 => m110_reg_1723,
        din1 => m94_reg_1658,
        dout => mul_ln251_fu_1183_p2);

    mul_5s_5s_5_1_1_U60 : component case_4_mul_5s_5s_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => mul_ln254_1_reg_1733,
        din1 => mul_ln254_reg_1718,
        dout => m117_fu_1190_p2);

    mul_3s_3s_3_1_1_U61 : component case_4_mul_3s_3s_3_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 3,
        dout_WIDTH => 3)
    port map (
        din0 => m118_fu_1198_p0,
        din1 => m102_reg_1605,
        dout => m118_fu_1198_p2);

    mul_5s_3s_5_1_1_U62 : component case_4_mul_5s_3s_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 3,
        dout_WIDTH => 5)
    port map (
        din0 => m117_fu_1190_p2,
        din1 => m102_reg_1605,
        dout => mul_ln256_1_fu_1203_p2);

    mul_5s_5s_5_1_1_U63 : component case_4_mul_5s_5s_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => mul_ln256_1_reg_1748,
        din1 => trunc_ln246_2_reg_1703,
        dout => mul_ln256_2_fu_1214_p2);

    mul_5s_5s_5_1_1_U64 : component case_4_mul_5s_5s_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => mul_ln256_2_fu_1214_p2,
        din1 => mul_ln256_reg_1738,
        dout => m119_fu_1218_p2);

    mul_14s_11s_16_1_1_U65 : component case_4_mul_14s_11s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 11,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln250_fu_1231_p0,
        din1 => grp_fu_1279_p3,
        dout => mul_ln250_fu_1231_p2);

    am_addmul_7s_2s_7s_7_4_1_U66 : component case_4_am_addmul_7s_2s_7s_7_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 7,
        din1_WIDTH => 2,
        din2_WIDTH => 7,
        dout_WIDTH => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln192_fu_394_p2,
        din1 => in18_fu_346_p1,
        din2 => grp_fu_1237_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1237_p3);

    mac_muladd_5s_5s_5s_5_4_1_U67 : component case_4_mac_muladd_5s_5s_5s_5_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln198_reg_1341,
        din1 => grp_fu_1246_p1,
        din2 => mul_ln197_fu_660_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1246_p3);

    am_addmul_7s_2s_5s_7_4_1_U68 : component case_4_am_addmul_7s_2s_5s_7_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 7,
        din1_WIDTH => 2,
        din2_WIDTH => 5,
        dout_WIDTH => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln194_reg_1335,
        din1 => m31_reg_1297,
        din2 => m38_fu_495_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1255_p3);

    am_addmul_5s_5ns_5s_5_4_1_U69 : component case_4_am_addmul_5s_5ns_5s_5_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => m52_reg_1436,
        din1 => m50_fu_673_p2,
        din2 => m62_fu_693_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1262_p3);

    am_addmul_5s_3s_5s_5_4_1_U70 : component case_4_am_addmul_5s_3s_5s_5_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 3,
        din2_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => m89_fu_869_p2,
        din1 => m78_reg_1527,
        din2 => m92_fu_873_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1270_p3);

    am_addmul_11s_8s_7s_11_4_1_U71 : component case_4_am_addmul_11s_8s_7s_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 8,
        din2_WIDTH => 7,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln234_reg_1668,
        din1 => m70_reg_1559,
        din2 => m100_reg_1683,
        ce => ap_const_logic_1,
        dout => grp_fu_1279_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln200_reg_1487 <= add_ln200_fu_703_p2;
                add_ln214_reg_1522 <= add_ln214_fu_762_p2;
                m54_reg_1471 <= m54_fu_677_p2;
                m58_reg_1476 <= m58_fu_684_p2;
                m62_reg_1481 <= m62_fu_693_p2;
                m64_reg_1492 <= m64_fu_712_p2;
                m65_reg_1497 <= m65_fu_725_p2;
                m67_reg_1506 <= grp_fu_1246_p3;
                m78_reg_1527 <= m78_fu_774_p2;
                m87_reg_1533 <= m87_fu_788_p2;
                trunc_ln210_reg_1511 <= trunc_ln210_fu_754_p1;
                trunc_ln212_reg_1517 <= trunc_ln212_fu_758_p1;
                trunc_ln225_reg_1538 <= trunc_ln225_fu_794_p1;
                trunc_ln226_reg_1543 <= trunc_ln226_fu_797_p1;
                trunc_ln227_1_reg_1549 <= trunc_ln227_1_fu_801_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                in18_reg_1287 <= in18_fu_346_p1;
                in19_reg_1292 <= in19_fu_350_p1;
                m31_reg_1297 <= m31_fu_366_p2;
                m34_reg_1304 <= m34_fu_380_p2;
                m42_reg_1309 <= m42_fu_414_p1;
                m48_reg_1330 <= m48_fu_434_p2;
                trunc_ln183_1_reg_1320 <= trunc_ln183_1_fu_422_p1;
                trunc_ln183_reg_1314 <= trunc_ln183_fu_418_p1;
                trunc_ln184_reg_1325 <= trunc_ln184_fu_426_p1;
                trunc_ln194_reg_1335 <= trunc_ln194_fu_440_p1;
                trunc_ln198_reg_1341 <= trunc_ln198_fu_444_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                m100_reg_1683 <= m100_fu_1053_p2;
                m76_reg_1653 <= m76_fu_976_p2;
                m94_reg_1658 <= m94_fu_1019_p2;
                m95_reg_1663 <= m95_fu_1027_p2;
                mul_ln254_reg_1718 <= mul_ln254_fu_1096_p2;
                sext_ln237_reg_1678 <= sext_ln237_fu_1049_p1;
                trunc_ln234_reg_1668 <= trunc_ln234_fu_1041_p1;
                trunc_ln235_reg_1673 <= trunc_ln235_fu_1045_p1;
                trunc_ln238_reg_1688 <= trunc_ln238_fu_1059_p1;
                trunc_ln246_1_reg_1698 <= trunc_ln246_1_fu_1067_p1;
                trunc_ln246_2_reg_1703 <= trunc_ln246_2_fu_1080_p1;
                trunc_ln246_reg_1693 <= trunc_ln246_fu_1063_p1;
                trunc_ln253_1_reg_1713 <= trunc_ln253_1_fu_1092_p1;
                trunc_ln253_reg_1708 <= trunc_ln253_fu_1088_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                m102_reg_1605 <= m102_fu_881_p2;
                m57_reg_1554 <= grp_fu_1255_p3;
                m70_reg_1559 <= m70_fu_813_p2;
                m74_reg_1570 <= m74_fu_841_p2;
                m75_reg_1577 <= m75_fu_846_p2;
                m80_reg_1587 <= m80_fu_858_p2;
                mul_ln223_reg_1565 <= mul_ln223_fu_824_p2;
                mul_ln244_reg_1582 <= mul_ln244_fu_853_p2;
                sext_ln254_reg_1595 <= sext_ln254_fu_862_p1;
                trunc_ln242_reg_1611 <= trunc_ln242_fu_886_p1;
                trunc_ln245_reg_1616 <= trunc_ln245_fu_890_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                m110_reg_1723 <= m110_fu_1139_p2;
                mul_ln254_1_reg_1733 <= mul_ln254_1_fu_1151_p2;
                mul_ln256_reg_1738 <= mul_ln256_fu_1155_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                m35_reg_1346 <= m35_fu_465_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                m39_reg_1361 <= m39_fu_509_p2;
                m44_reg_1372 <= m44_fu_534_p2;
                m45_reg_1378 <= m45_fu_557_p1;
                m46_reg_1383 <= m46_fu_561_p2;
                m47_reg_1388 <= m47_fu_569_p2;
                m53_reg_1400 <= m53_fu_587_p2;
                mul_ln189_1_reg_1366 <= mul_ln189_1_fu_515_p2;
                mul_ln189_reg_1395 <= mul_ln189_fu_581_p2;
                sext_ln175_reg_1356 <= sext_ln175_fu_488_p1;
                trunc_ln206_reg_1415 <= trunc_ln206_fu_600_p1;
                trunc_ln229_reg_1410 <= trunc_ln229_fu_596_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                m43_reg_1420 <= m43_fu_621_p2;
                m49_reg_1426 <= m49_fu_629_p2;
                m52_reg_1436 <= m52_fu_640_p2;
                m56_reg_1442 <= m56_fu_648_p2;
                mul_ln187_reg_1431 <= mul_ln187_fu_634_p2;
                mul_ln197_reg_1453 <= mul_ln197_fu_660_p2;
                trunc_ln195_reg_1447 <= trunc_ln195_fu_653_p1;
                trunc_ln203_reg_1460 <= trunc_ln203_fu_665_p1;
                trunc_ln217_reg_1465 <= trunc_ln217_fu_669_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                m82_reg_1621 <= m82_fu_910_p2;
                m83_reg_1627 <= m83_fu_918_p2;
                mul_ln248_reg_1642 <= mul_ln248_fu_951_p2;
                trunc_ln227_reg_1632 <= trunc_ln227_fu_924_p1;
                trunc_ln254_1_reg_1648 <= trunc_ln254_1_fu_956_p1;
                trunc_ln254_reg_1637 <= trunc_ln254_fu_928_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                mul_ln256_1_reg_1748 <= mul_ln256_1_fu_1203_p2;
                sext_ln250_reg_1743 <= sext_ln250_fu_1177_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln185_fu_408_p2 <= std_logic_vector(unsigned(in29_fu_358_p1) + unsigned(sext_ln179_fu_404_p1));
    add_ln200_fu_703_p2 <= std_logic_vector(signed(sext_ln200_1_fu_700_p1) + signed(sext_ln200_fu_697_p1));
    add_ln214_fu_762_p2 <= std_logic_vector(signed(trunc_ln202_1_fu_721_p1) + signed(trunc_ln206_reg_1415));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1237_p2 <= m34_fu_380_p2(7 - 1 downto 0);
    grp_fu_1246_p1 <= mul_ln172_fu_459_p2(5 - 1 downto 0);
    in14_fu_342_p1 <= in_data_13(5 - 1 downto 0);
    in18_fu_346_p1 <= in_data_17(2 - 1 downto 0);
    in19_fu_350_p1 <= in_data_18(4 - 1 downto 0);
    in23_fu_354_p1 <= in_data_22(7 - 1 downto 0);
    in27_fu_477_p1 <= in_data_26(3 - 1 downto 0);
    in29_fu_358_p1 <= in_data_28(12 - 1 downto 0);
    m101_fu_1132_p1 <= sext_ln237_reg_1678(4 - 1 downto 0);
    m102_fu_881_p0 <= m92_fu_873_p2(3 - 1 downto 0);
    m106_fu_1075_p2 <= std_logic_vector(unsigned(trunc_ln254_reg_1637) + unsigned(sext_ln243_fu_1071_p1));
    m118_fu_1198_p0 <= m117_fu_1190_p2(3 - 1 downto 0);
    m31_fu_366_p0 <= in_data_22(2 - 1 downto 0);
    m31_fu_366_p1 <= in_data_9(2 - 1 downto 0);
    m34_fu_380_p0 <= in_data_28(8 - 1 downto 0);
    m35_fu_465_p1 <= mul_ln172_fu_459_p2(9 - 1 downto 0);
    m38_fu_495_p2 <= std_logic_vector(signed(sext_ln175_1_fu_492_p1) + signed(sext_ln175_fu_488_p1));
    m39_fu_509_p0 <= in_data_14(9 - 1 downto 0);
    m41_fu_528_p2 <= std_logic_vector(unsigned(trunc_ln178_fu_524_p1) + unsigned(sext_ln178_fu_521_p1));
    m42_fu_414_p1 <= add_ln185_fu_408_p2(10 - 1 downto 0);
    m43_fu_621_p1 <= sext_ln175_reg_1356(3 - 1 downto 0);
    m44_fu_534_p0 <= in_data_15(4 - 1 downto 0);
    m44_fu_534_p1 <= sext_ln178_fu_521_p1(2 - 1 downto 0);
    m45_fu_557_p1 <= mul_ln182_fu_551_p2(7 - 1 downto 0);
    m46_fu_561_p2 <= std_logic_vector(unsigned(trunc_ln183_reg_1314) + unsigned(trunc_ln183_1_reg_1320));
    m47_fu_569_p1 <= in_data_16(6 - 1 downto 0);
    m53_fu_587_p2 <= std_logic_vector(unsigned(trunc_ln183_reg_1314) + unsigned(m46_fu_561_p2));
    m65_fu_725_p1 <= m54_fu_677_p2(4 - 1 downto 0);
    m66_fu_735_p0 <= add_ln200_fu_703_p2(3 - 1 downto 0);
    m73_fu_833_p2 <= std_logic_vector(signed(trunc_ln210_reg_1511) + signed(sext_ln210_fu_830_p1));
    m76_fu_976_p2 <= std_logic_vector(unsigned(m48_reg_1330) + unsigned(sext_ln213_1_fu_973_p1));
    m78_fu_774_p0 <= grp_fu_1246_p3(3 - 1 downto 0);
    m78_fu_774_p1 <= m50_fu_673_p2(3 - 1 downto 0);
    m85_fu_991_p0 <= sext_ln222_1_fu_988_p1(11 - 1 downto 0);
    m87_fu_788_p0 <= m60_fu_689_p2(3 - 1 downto 0);
    m87_fu_788_p1 <= m58_fu_684_p2(3 - 1 downto 0);
    m90_fu_1002_p2 <= std_logic_vector(unsigned(trunc_ln227_reg_1632) + unsigned(trunc_ln227_1_reg_1549));
    m93_fu_1010_p0 <= m76_fu_976_p2(7 - 1 downto 0);
    m95_fu_1027_p1 <= sext_ln222_1_fu_988_p1(11 - 1 downto 0);
    m96_fu_1036_p2 <= std_logic_vector(unsigned(m75_reg_1577) + unsigned(sext_ln233_fu_1033_p1));
    mul_ln172_fu_459_p0 <= mul_ln172_fu_459_p00(9 - 1 downto 0);
    mul_ln172_fu_459_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln172_fu_451_p1),10));
    mul_ln182_fu_551_p0 <= mul_ln182_fu_551_p00(7 - 1 downto 0);
    mul_ln182_fu_551_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln182_fu_540_p1),9));
    mul_ln187_fu_634_p0 <= in_data_2(5 - 1 downto 0);
    mul_ln187_fu_634_p1 <= in_data_20(5 - 1 downto 0);
    mul_ln189_1_fu_515_p0 <= in_data_14(5 - 1 downto 0);
    mul_ln189_fu_581_p0 <= mul_ln182_fu_551_p2(5 - 1 downto 0);
    mul_ln192_fu_394_p0 <= in_data_6(7 - 1 downto 0);
    mul_ln250_fu_1231_p0 <= sext_ln250_reg_1743(14 - 1 downto 0);
    mul_ln254_1_fu_1151_p1 <= sext_ln254_reg_1595(3 - 1 downto 0);
        out_data_0 <= std_logic_vector(IEEE.numeric_std.resize(signed(m41_fu_528_p2),16));


    out_data_0_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_data_0_ap_vld <= ap_const_logic_1;
        else 
            out_data_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        out_data_1 <= std_logic_vector(IEEE.numeric_std.resize(signed(m66_fu_735_p2),16));

        out_data_10 <= std_logic_vector(IEEE.numeric_std.resize(signed(m107_fu_938_p2),16));


    out_data_10_ap_vld_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            out_data_10_ap_vld <= ap_const_logic_1;
        else 
            out_data_10_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        out_data_11 <= std_logic_vector(IEEE.numeric_std.resize(signed(m108_fu_946_p2),16));


    out_data_11_ap_vld_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            out_data_11_ap_vld <= ap_const_logic_1;
        else 
            out_data_11_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        out_data_12 <= std_logic_vector(IEEE.numeric_std.resize(signed(m111_fu_1084_p2),16));


    out_data_12_ap_vld_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_data_12_ap_vld <= ap_const_logic_1;
        else 
            out_data_12_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_data_13 <= mul_ln250_fu_1231_p2;

    out_data_13_ap_vld_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            out_data_13_ap_vld <= ap_const_logic_1;
        else 
            out_data_13_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_data_14 <= mul_ln251_fu_1183_p2;

    out_data_14_ap_vld_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            out_data_14_ap_vld <= ap_const_logic_1;
        else 
            out_data_14_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        out_data_15 <= std_logic_vector(IEEE.numeric_std.resize(signed(m116_fu_1147_p2),16));


    out_data_15_ap_vld_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            out_data_15_ap_vld <= ap_const_logic_1;
        else 
            out_data_15_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        out_data_16 <= std_logic_vector(IEEE.numeric_std.resize(signed(m118_fu_1198_p2),16));


    out_data_16_ap_vld_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            out_data_16_ap_vld <= ap_const_logic_1;
        else 
            out_data_16_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        out_data_17 <= std_logic_vector(IEEE.numeric_std.resize(signed(m119_fu_1218_p2),16));


    out_data_17_ap_vld_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            out_data_17_ap_vld <= ap_const_logic_1;
        else 
            out_data_17_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out_data_1_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_data_1_ap_vld <= ap_const_logic_1;
        else 
            out_data_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        out_data_2 <= std_logic_vector(IEEE.numeric_std.resize(signed(m73_fu_833_p2),16));


    out_data_2_ap_vld_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_data_2_ap_vld <= ap_const_logic_1;
        else 
            out_data_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        out_data_3 <= std_logic_vector(IEEE.numeric_std.resize(signed(m85_fu_991_p2),16));


    out_data_3_ap_vld_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_data_3_ap_vld <= ap_const_logic_1;
        else 
            out_data_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        out_data_4 <= std_logic_vector(IEEE.numeric_std.resize(signed(m86_fu_997_p2),16));


    out_data_4_ap_vld_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_data_4_ap_vld <= ap_const_logic_1;
        else 
            out_data_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        out_data_5 <= std_logic_vector(IEEE.numeric_std.resize(signed(m88_fu_865_p2),16));


    out_data_5_ap_vld_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_data_5_ap_vld <= ap_const_logic_1;
        else 
            out_data_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        out_data_6 <= std_logic_vector(IEEE.numeric_std.resize(signed(m93_fu_1010_p2),16));


    out_data_6_ap_vld_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_data_6_ap_vld <= ap_const_logic_1;
        else 
            out_data_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        out_data_7 <= std_logic_vector(IEEE.numeric_std.resize(signed(m98_fu_1128_p2),16));


    out_data_7_ap_vld_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            out_data_7_ap_vld <= ap_const_logic_1;
        else 
            out_data_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        out_data_8 <= std_logic_vector(IEEE.numeric_std.resize(signed(m101_fu_1132_p2),16));


    out_data_8_ap_vld_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            out_data_8_ap_vld <= ap_const_logic_1;
        else 
            out_data_8_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        out_data_9 <= std_logic_vector(IEEE.numeric_std.resize(signed(m106_fu_1075_p2),16));


    out_data_9_ap_vld_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_data_9_ap_vld <= ap_const_logic_1;
        else 
            out_data_9_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln175_1_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in19_reg_1292),5));

        sext_ln175_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in27_fu_477_p1),5));

        sext_ln178_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(m31_reg_1297),4));

        sext_ln179_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in14_fu_342_p1),12));

        sext_ln200_1_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(m47_reg_1388),7));

        sext_ln200_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(m43_reg_1420),7));

        sext_ln210_fu_830_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(m46_reg_1383),11));

        sext_ln213_1_fu_973_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(m74_reg_1570),12));

        sext_ln222_1_fu_988_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(m74_reg_1570),14));

        sext_ln233_fu_1033_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(m80_reg_1587),7));

        sext_ln237_fu_1049_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(m77_fu_981_p2),7));

        sext_ln243_fu_1071_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(m96_fu_1036_p2),9));

        sext_ln250_fu_1177_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(m110_reg_1723),16));

        sext_ln254_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(m78_reg_1527),5));

    trunc_ln172_fu_451_p1 <= in_data_10(9 - 1 downto 0);
    trunc_ln178_fu_524_p1 <= m38_fu_495_p2(4 - 1 downto 0);
    trunc_ln180_fu_617_p1 <= in_data_27(5 - 1 downto 0);
    trunc_ln182_fu_540_p1 <= in_data_19(7 - 1 downto 0);
    trunc_ln183_1_fu_422_p1 <= in_data_22(5 - 1 downto 0);
    trunc_ln183_fu_418_p1 <= add_ln185_fu_408_p2(5 - 1 downto 0);
    trunc_ln184_fu_426_p1 <= mul_ln192_fu_394_p2(6 - 1 downto 0);
    trunc_ln194_fu_440_p1 <= m34_fu_380_p2(7 - 1 downto 0);
    trunc_ln195_fu_653_p1 <= m49_fu_629_p2(8 - 1 downto 0);
    trunc_ln198_fu_444_p1 <= m48_fu_434_p2(5 - 1 downto 0);
    trunc_ln202_1_fu_721_p1 <= m64_fu_712_p2(4 - 1 downto 0);
    trunc_ln203_fu_665_p1 <= m43_fu_621_p2(3 - 1 downto 0);
    trunc_ln206_fu_600_p1 <= m53_fu_587_p2(4 - 1 downto 0);
    trunc_ln210_fu_754_p1 <= m68_fu_748_p2(11 - 1 downto 0);
    trunc_ln212_fu_758_p1 <= m64_fu_712_p2(7 - 1 downto 0);
    trunc_ln217_fu_669_p1 <= m56_fu_648_p2(5 - 1 downto 0);
    trunc_ln225_fu_794_p1 <= grp_fu_1246_p3(4 - 1 downto 0);
    trunc_ln226_fu_797_p1 <= m68_fu_748_p2(5 - 1 downto 0);
    trunc_ln227_1_fu_801_p1 <= m68_fu_748_p2(7 - 1 downto 0);
    trunc_ln227_fu_924_p1 <= m82_fu_910_p2(7 - 1 downto 0);
    trunc_ln229_fu_596_p1 <= m47_fu_569_p2(5 - 1 downto 0);
    trunc_ln234_fu_1041_p1 <= m95_fu_1027_p2(11 - 1 downto 0);
    trunc_ln235_fu_1045_p1 <= m95_fu_1027_p2(12 - 1 downto 0);
    trunc_ln238_fu_1059_p1 <= m95_fu_1027_p2(7 - 1 downto 0);
    trunc_ln242_fu_886_p1 <= m75_fu_846_p2(6 - 1 downto 0);
    trunc_ln245_fu_890_p1 <= mul_ln244_fu_853_p2(5 - 1 downto 0);
    trunc_ln246_1_fu_1067_p1 <= m94_fu_1019_p2(5 - 1 downto 0);
    trunc_ln246_2_fu_1080_p1 <= m90_fu_1002_p2(5 - 1 downto 0);
    trunc_ln246_fu_1063_p1 <= m96_fu_1036_p2(5 - 1 downto 0);
    trunc_ln253_1_fu_1092_p1 <= m90_fu_1002_p2(6 - 1 downto 0);
    trunc_ln253_fu_1088_p1 <= m100_fu_1053_p2(6 - 1 downto 0);
    trunc_ln254_1_fu_956_p1 <= m82_fu_910_p2(5 - 1 downto 0);
    trunc_ln254_fu_928_p1 <= m82_fu_910_p2(9 - 1 downto 0);
end behav;
